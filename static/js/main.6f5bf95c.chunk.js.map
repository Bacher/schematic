{"version":3,"sources":["common/types.ts","stitches.ts","utils/simulation.ts","common/data.ts","utils/trigano.ts","hooks/useForceUpdate.ts","hooks/useLatest.ts","hooks/useHandler.ts","models/GameModel.ts","hooks/useWindowEvent.ts","hooks/useRefState.ts","common/common.ts","utils/render.ts","hooks/usePageActive.ts","hooks/useDocumentEvent.ts","hooks/useActivePageInterval.ts","components/SchemaErrors/SchemaErrors.tsx","components/InputSignalsControl/InputSignalsControl.tsx","components/Toolbar/Toolbar.tsx","components/OptionsPanel/Option.tsx","components/OptionsPanel/OptionsPanel.tsx","components/DebugPanel/DebugPanel.tsx","components/Simulator/elements.tsx","components/Simulator/Simulator.tsx","hooks/useAssets.ts","utils/canvas.ts","components/App/App.tsx","hooks/useOnChange.ts","utils/array.ts","index.tsx"],"names":["ElementType","ObjectType","LoadingStatus","createStitches","theme","colors","gray400","gray500","media","bp1","bp2","utils","fontVariant","value","split","size","lineHeight","fontSize","styled","css","globalCss","keyframes","getCssText","createTheme","config","NodePowerState","ICON_SIZE","elementsDescriptions","PNP","pins","pos","x","y","NPN","POWER","GROUND","INPUT","OUTPUT","DOT","defaultOptions","autoSaves","isInputVector","isOutputVector","simulate","debugDrawId","debugDrawAxis","debugShowFps","subtract","p1","p2","rotate","point","a","sinA","Math","sin","cosA","cos","getPinId","p","elId","pinIndex","useForceUpdate","incRef","useRef","useState","current","setInc","useCallback","useLatest","some","ref","useHandler","callback","callbackRef","dropIndex","items","filter","index","getGameIdStorageKey","gameId","watch","target","propertyKey","descriptor","originalMethod","this","GameModel","Error","iAmWatcher","underWatch","before","getState","args","results","apply","needTriggerUpdate","after","triggerUpdate","draw","elements","connections","inputSignals","options","drawHandler","destroying","hoverElement","focusElement","wireElement","movingElement","mousePos","mouseState","panState","lastStateSnapshot","stateListeners","saveGameThrottled","throttle","saveGame","leading","trailing","window","gameModel","undefined","isMouseDown","isPan","flush","clearState","localStorage","setItem","JSON","stringify","cmpState","shallowequal","state","cursor","getCursor","nodesSimulation","getSimulation","focusTarget","type","ELEMENT","element","find","id","inputIndex","indexOf","without","CONNECTION","connectionIndex","onMouseUp","position","movement","dX","dY","checkHover","isMoving","Boolean","PIN","startWiring","updateElement","el","im","wire","pullPos","checkOverlap","getNextId","isActual","listener","forceUpdate","selector","lastSelectedValue","selectedValue","actualSelectedValue","getLoadedState","error","console","checkPinHover","checkElementHover","checkConnectionHover","x0","y0","pin","PIN_DOT_RADIUS","connection","point1","getConnectionPinPosition","shiftedPoint2","shiftedMouse","atan2","rotatedPoint2","rotatedMouse","getElById","lastElement","last","match","parseInt","isShortCircuit","getElement","pinId","inputElements","pinIdToNodes","Map","nodes","Set","pinId1","pinId2","node1","get","node2","mergedNode","delete","add","set","push","node","nodesList","values","map","IMPEDANCE","pinIdToNode","hasChanges","setZoneState","SHORT_CIRCUIT","pin1Zone","pin2Zone","pin3Zone","buildNodesState","getNodesSimulationState","json","getItem","parse","savedOptions","optionsNames","Object","keys","defaults","pick","removeItem","toGameId","useGameState","already","selectorHandler","gameState","useWindowEvent","eventName","func","useEffect","addEventListener","removeEventListener","useRefState","getLiteralForSignalByIndex","elementsCount","isInput","charVariants","isVector","length","charAt","render","ctx","densityFactor","assets","tick","simulationPins","save","clearRect","width","height","scale","translate","floor","lineWidth","textBaseline","textAlign","font","fillStyle","beginPath","moveTo","lineTo","strokeStyle","stroke","fillText","restore","isHover","isFocus","strokeRect","FOCUS_SIZE","el1","el2","nodeState","pin1","pin2","isHovered","isInFocus","color","drawDash","setLineDash","char","getLiteralForSignal","main","fallback","img","images","drawImage","i","isWire","arc","PI","closePath","fillColor","noBorder","includes","fill","usePageActive","isActive","setActive","document","useDocumentEvent","newIsActive","visibilityState","useActivePageInterval","ms","intervalId","setInterval","clearInterval","_Title","margin","SchemaErrors","errors","used","line","_Wrapper","display","alignItems","left","bottom","padding","marginRight","_Inputs","gap","variants","reverse","true","flexDirection","_InputLabel","gridTemplateAreas","userSelect","gridArea","_HiddenInput","opacity","_Bg","background","_Symbol","InputSignalsControl","enabled","checked","onChange","e","signals","updateInputSignals","top","borderRadius","_Button","flexShrink","border","whiteSpace","appearance","_Divider","Toolbar","href","title","onClick","preventDefault","addElement","disabled","deleteElementInFocus","reloadFromSave","_Option","Option","_SimulateButton","marginBottom","active","OptionsPanel","update","updates","updateOptions","OptionControl","optionName","_Yes","_No","yesNo","DebugPanel","_App","flexGrow","overflow","_CanvasWrapper","_Canvas","enableScaling","transformOrigin","transform","_FpsCounter","right","pointerEvents","_Space","_Info","flexBasis","borderLeft","overflowY","getCurrentDensityFactor","devicePixelRatio","Simulator","canvasRef","canvasWrapperRef","drawFps","setDrawFps","tickRef","useMemo","checkSavedGame","loadGame","createEmptyModel","showFps","fps","x1","status","NONE","x2","is2x","assetsSet","loadImages","remainLoad","LOADING","imgName","image","Image","src","onLoad","DONE","useAssets","convertScreenCoordsToAppCoords","actualizeDensityFactor","factor","canvas","getContext","getCanvasContext","interval","debounce","maxWait","updateSize","canvasWrapper","clientWidth","clientHeight","setDrawHandler","destroy","useLayoutEffect","setTimeout","style","button","onMouseDown","onMouseMove","clientX","clientY","movementX","movementY","onMouseLeave","resetCursorState","onContextMenu","allowOpenContextMenu","_GameTitle","_List","_ListItem","_GameLinkWrapper","minWidth","_GameLink","marginLeft","parseGameId","gameNumber","getCurrentGameId","currentGames","hash","location","trim","replace","game","getNextGameId","lastGame","App","savedGames","setCurrentGames","deps","initRef","useOnChange","currentGameId","setCurrentGameId","prompt","clonedGame","cloneGame","array","item","slice","insert","confirm","removeGame","newGameId","assign","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6f5bf95c.chunk.js","sourcesContent":["export type GameId = `s${number}`;\n\nexport enum ElementType {\n  PNP = 'pnp',\n  NPN = 'npn',\n  POWER = 'power',\n  GROUND = 'ground',\n  INPUT = 'input',\n  OUTPUT = 'output',\n  DOT = 'dot',\n}\n\nexport type Coords = {\n  x: number;\n  y: number;\n};\n\nexport type Point = {\n  x: number;\n  y: number;\n};\n\nexport type BoxSize = {\n  width: number;\n  height: number;\n};\n\nexport type Cursor =\n  | 'initial'\n  | 'move'\n  | 'pointer'\n  | 'drag'\n  | 'grab'\n  | 'grabbing'\n  | 'cross';\n\nexport enum ObjectType {\n  ELEMENT,\n  CONNECTION,\n  PIN,\n}\n\nexport type ElementId = `el${number}`;\n\nexport type Element = {\n  type: ElementType;\n  id: ElementId;\n  pos: Coords;\n};\n\nexport type ConnectionPin = { elId: ElementId; pinIndex: number };\n\nexport type Connection = [ConnectionPin, ConnectionPin];\n\nexport type Pin = {\n  pos: Coords;\n};\n\nexport type ElementDescription = {\n  pins: Pin[];\n};\n\nexport type GameState = {\n  elements: Element[];\n  connections: Connection[];\n};\n\nexport type Options = {\n  autoSaves: boolean;\n  isInputVector: boolean;\n  isOutputVector: boolean;\n  simulate: boolean;\n  debugDrawId: boolean;\n  debugDrawAxis: boolean;\n  debugShowFps: boolean;\n};\n\nexport enum LoadingStatus {\n  NONE,\n  LOADING,\n  DONE,\n}\n\nexport type AssetSet = {\n  images: Record<string, HTMLImageElement>;\n  status: LoadingStatus;\n};\n\nexport type Assets = {\n  x1: AssetSet;\n  x2: AssetSet;\n};\n","import { createStitches } from '@stitches/react';\n\nexport const {\n  styled,\n  css,\n  globalCss,\n  keyframes,\n  getCssText,\n  theme,\n  createTheme,\n  config,\n} = createStitches({\n  theme: {\n    colors: {\n      gray400: 'gainsboro',\n      gray500: 'lightgray',\n    },\n  },\n  media: {\n    bp1: '(min-width: 480px)',\n    bp2: '(min-width: 768px)',\n  },\n  utils: {\n    fontVariant: (value: `${number}|${number}`) => {\n      const [size, lineHeight] = value.split('|');\n\n      return {\n        fontSize: `${size}px`,\n        lineHeight: `${lineHeight}px`,\n      };\n    },\n  },\n});\n","import {\n  Connection,\n  ConnectionPin,\n  Element,\n  ElementId,\n  ElementType,\n} from 'common/types';\n\nexport type PinId = `${ElementId}:${number}`;\n\ntype Node = PinId[];\n\nexport enum NodePowerState {\n  IMPEDANCE,\n  GROUND,\n  POWER,\n  SHORT_CIRCUIT,\n}\n\nexport type NodeState = {\n  state: NodePowerState;\n  pins: PinId[];\n};\n\nexport function getPinId(p: ConnectionPin): PinId {\n  return `${p.elId}:${p.pinIndex}`;\n}\n\nexport function getNodesSimulationState(\n  elements: Element[],\n  connections: Connection[],\n  inputSignals: boolean[],\n): NodeState[] {\n  let isShortCircuit = false;\n\n  function getElement(pinId: PinId): Element {\n    const elId = pinId.split(':')[0];\n\n    const element = elements.find(({ id }) => id === elId);\n\n    if (!element) {\n      throw new Error('No element');\n    }\n\n    return element;\n  }\n\n  function buildNodesState(nodes: NodeState[]) {\n    const pinIdToNode = new Map<PinId, NodeState | undefined>();\n\n    for (const node of nodes) {\n      for (const pin of node.pins) {\n        pinIdToNode.set(pin, node);\n      }\n    }\n\n    let hasChanges = true;\n\n    function setZoneState(node: NodeState, state: NodePowerState): void {\n      if (\n        state === NodePowerState.POWER &&\n        node.state === NodePowerState.GROUND\n      ) {\n        isShortCircuit = true;\n        node.state = NodePowerState.SHORT_CIRCUIT;\n        return;\n      }\n\n      if (\n        state === NodePowerState.GROUND &&\n        node.state === NodePowerState.POWER\n      ) {\n        isShortCircuit = true;\n        node.state = NodePowerState.SHORT_CIRCUIT;\n        return;\n      }\n\n      if (node.state !== state) {\n        node.state = state;\n        hasChanges = true;\n      } else {\n        hasChanges = false;\n      }\n    }\n\n    while (hasChanges) {\n      hasChanges = false;\n\n      for (const node of nodes) {\n        for (const pin of node.pins) {\n          const element = getElement(pin);\n\n          switch (element.type) {\n            case ElementType.INPUT: {\n              const inputIndex = inputElements.indexOf(element);\n              const value = inputSignals[inputIndex];\n              setZoneState(\n                node,\n                value ? NodePowerState.POWER : NodePowerState.GROUND,\n              );\n              break;\n            }\n            case ElementType.POWER:\n              setZoneState(node, NodePowerState.POWER);\n              break;\n            case ElementType.GROUND:\n              setZoneState(node, NodePowerState.GROUND);\n              break;\n            case ElementType.NPN: {\n              // Maybe I should iterate over elements instead of zones?\n              const pin1Zone = pinIdToNode.get(`${element.id}:0`);\n              const pin2Zone = pinIdToNode.get(`${element.id}:1`);\n              const pin3Zone = pinIdToNode.get(`${element.id}:2`);\n\n              if (\n                pin1Zone &&\n                pin1Zone.state === NodePowerState.GROUND &&\n                pin2Zone &&\n                pin2Zone.state === NodePowerState.POWER &&\n                pin3Zone\n              ) {\n                setZoneState(pin3Zone, NodePowerState.POWER);\n              }\n              break;\n            }\n            case ElementType.PNP: {\n              // Maybe I should iterate over elements instead of zones?\n              const pin1Zone = pinIdToNode.get(`${element.id}:0`);\n              const pin2Zone = pinIdToNode.get(`${element.id}:1`);\n              const pin3Zone = pinIdToNode.get(`${element.id}:2`);\n\n              if (\n                pin1Zone &&\n                pin1Zone.state === NodePowerState.POWER &&\n                pin2Zone &&\n                pin2Zone.state === NodePowerState.GROUND &&\n                pin3Zone\n              ) {\n                setZoneState(pin3Zone, NodePowerState.GROUND);\n              }\n              break;\n            }\n          }\n\n          if (isShortCircuit) {\n            return;\n          }\n        }\n      }\n      break;\n    }\n  }\n\n  const inputElements = elements.filter((el) => el.type === ElementType.INPUT);\n  const pinIdToNodes = new Map<PinId, Node>();\n  const nodes = new Set<Node>();\n\n  for (const [p1, p2] of connections) {\n    const pinId1 = getPinId(p1);\n    const pinId2 = getPinId(p2);\n\n    const node1 = pinIdToNodes.get(pinId1);\n    const node2 = pinIdToNodes.get(pinId2);\n\n    if (node1 && node2) {\n      const mergedNode = [...node1, ...node2];\n\n      nodes.delete(node1);\n      nodes.delete(node2);\n      nodes.add(mergedNode);\n\n      for (const pinId of mergedNode) {\n        pinIdToNodes.set(pinId, mergedNode);\n      }\n    } else if (node1) {\n      node1.push(pinId2);\n      pinIdToNodes.set(pinId2, node1);\n    } else if (node2) {\n      node2.push(pinId1);\n      pinIdToNodes.set(pinId1, node2);\n    } else {\n      const node = [pinId1, pinId2];\n      nodes.add(node);\n      pinIdToNodes.set(pinId1, node);\n      pinIdToNodes.set(pinId2, node);\n    }\n  }\n\n  const nodesList = [...nodes.values()].map((pins) => ({\n    state: NodePowerState.IMPEDANCE,\n    pins,\n  }));\n\n  buildNodesState(nodesList);\n\n  return nodesList;\n}\n","import { ElementType, ElementDescription, Options } from './types';\n\nexport const ICON_SIZE = 48;\nexport const FOCUS_SIZE = ICON_SIZE + 4;\nexport const PIN_DOT_RADIUS = 5;\nexport const MAX_FPS = 60;\nexport const AUTO_SAVE_INTERVAL = 2000;\nexport const ANIMATION_TICK = 500;\n\nexport const elementsDescriptions: Record<ElementType, ElementDescription> = {\n  [ElementType.PNP]: {\n    pins: [\n      { pos: { x: 0.47, y: 0.94 } },\n      { pos: { x: -0.07, y: 0.32 } },\n      { pos: { x: 1.05, y: 0.32 } },\n    ],\n  },\n  [ElementType.NPN]: {\n    pins: [\n      { pos: { x: 0.47, y: 1 } },\n      { pos: { x: -0.07, y: 0.33 } },\n      { pos: { x: 1.05, y: 0.32 } },\n    ],\n  },\n  [ElementType.POWER]: {\n    pins: [{ pos: { x: 0.52, y: 0.8 } }],\n  },\n  [ElementType.GROUND]: {\n    pins: [{ pos: { x: 0.46, y: 0.15 } }],\n  },\n  [ElementType.INPUT]: {\n    pins: [{ pos: { x: 0.5, y: 0.8 } }],\n  },\n  [ElementType.OUTPUT]: {\n    pins: [{ pos: { x: 0.2, y: 0.5 } }],\n  },\n  [ElementType.DOT]: {\n    pins: [{ pos: { x: 0.5, y: 0.5 } }],\n  },\n};\n\nexport const defaultOptions: Options = {\n  autoSaves: true,\n  isInputVector: false,\n  isOutputVector: false,\n  simulate: false,\n  debugDrawId: false,\n  debugDrawAxis: false,\n  debugShowFps: false,\n};\n","import type { Point } from 'common/types';\n\nexport function subtract(p1: Point, p2: Point): Point {\n  return {\n    x: p1.x - p2.x,\n    y: p1.y - p2.y,\n  };\n}\n\nexport function rotate(point: Point, a: number): Point {\n  const sinA = Math.sin(a);\n  const cosA = Math.cos(a);\n\n  return {\n    x: point.x * cosA - point.y * sinA,\n    y: point.x * sinA + point.y * cosA,\n  };\n}\n","import { useCallback, useRef, useState } from 'react';\n\nexport function useForceUpdate() {\n  const incRef = useRef(0);\n  const [, setInc] = useState(incRef.current);\n\n  return useCallback(() => {\n    incRef.current += 1;\n    setInc(incRef.current);\n  }, []);\n}\n","import { useRef } from 'react';\n\nexport function useLatest<T>(some: T): { current: T } {\n  const ref = useRef(some);\n  ref.current = some;\n  return ref;\n}\n","import { useCallback } from 'react';\nimport { useLatest } from './useLatest';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useHandler<F extends (...args: any) => any>(callback: F): F {\n  const callbackRef = useLatest<F>(callback);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ((...args: any) => callbackRef.current(...args)) as any,\n    [],\n  );\n}\n","import { pick, defaults, without, last, throttle } from 'lodash-es';\nimport im from 'immer';\nimport shallowequal from 'shallowequal';\n\nimport {\n  Connection,\n  Coords,\n  Cursor,\n  Element,\n  ElementId,\n  ElementType,\n  GameId,\n  ObjectType,\n  Options,\n  Point,\n} from 'common/types';\nimport {\n  AUTO_SAVE_INTERVAL,\n  defaultOptions,\n  elementsDescriptions,\n  ICON_SIZE,\n  PIN_DOT_RADIUS,\n} from 'common/data';\nimport { rotate, subtract } from 'utils/trigano';\nimport { getNodesSimulationState, NodeState } from 'utils/simulation';\nimport { useForceUpdate } from 'hooks/useForceUpdate';\nimport { useHandler } from 'hooks/useHandler';\n\ntype HoverElement =\n  | {\n      type: ObjectType.ELEMENT;\n      elId: ElementId;\n    }\n  | {\n      type: ObjectType.PIN;\n      elId: ElementId;\n      pinIndex: number;\n    }\n  | {\n      type: ObjectType.CONNECTION;\n      connectionIndex: number;\n    };\n\ntype FocusElement =\n  | {\n      type: ObjectType.ELEMENT;\n      elId: ElementId;\n    }\n  | {\n      type: ObjectType.CONNECTION;\n      connectionIndex: number;\n    };\n\ntype WireElement = {\n  elId: ElementId;\n  pinIndex: number;\n  pullPos: Point | undefined;\n};\n\ntype ElementPointer = {\n  elId: ElementId;\n};\n\ntype MouseState = {\n  isMouseDown: boolean;\n};\n\ntype PanState = {\n  isPan: boolean;\n};\n\nfunction dropIndex<T>(items: T[], dropIndex: number): T[] {\n  return items.filter((value, index) => index !== dropIndex);\n}\n\nfunction getGameIdStorageKey(gameId: GameId): string {\n  return `sch_game_${gameId}`;\n}\n\ntype CmpGameModelState = {\n  elements: Element[];\n  connections: Connection[];\n  inputSignals: boolean[];\n  pos: Point;\n  options: Options;\n  hoverElement: HoverElement | undefined;\n  focusElement: FocusElement | undefined;\n  wireElement: WireElement | undefined;\n  movingElement: ElementPointer | undefined;\n  panState: PanState;\n};\n\nexport type GameModelState = CmpGameModelState & {\n  cursor: Cursor | undefined;\n  nodesSimulation: NodeState[] | undefined;\n};\n\nfunction watch(\n  target: GameModel,\n  propertyKey: string,\n  descriptor: PropertyDescriptor,\n) {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = function watch(...args: unknown[]) {\n    if (!(this instanceof GameModel)) {\n      throw new Error();\n    }\n\n    let iAmWatcher = false;\n\n    if (!this.underWatch) {\n      iAmWatcher = true;\n      this.underWatch = true;\n    }\n\n    const before = this.getState();\n    const results = originalMethod.apply(this, args);\n\n    if (iAmWatcher) {\n      if (!this.needTriggerUpdate) {\n        const after = this.getState();\n        this.needTriggerUpdate = before !== after;\n      }\n\n      if (this.needTriggerUpdate) {\n        this.needTriggerUpdate = false;\n        this.triggerUpdate();\n      }\n\n      this.underWatch = false;\n    }\n\n    return results;\n  };\n}\n\nfunction draw(\n  target: GameModel,\n  propertyKey: string,\n  descriptor: PropertyDescriptor,\n) {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = function draw(...args: unknown[]) {\n    if (!(this instanceof GameModel)) {\n      throw new Error();\n    }\n\n    const results = originalMethod.apply(this, args);\n\n    if (this.underWatch) {\n      this.needTriggerUpdate = true;\n    } else {\n      this.triggerUpdate();\n    }\n\n    return results;\n  };\n}\n\nexport class GameModel {\n  public static createEmptyModel(gameId: GameId): GameModel {\n    return new GameModel({\n      gameId,\n      pos: { x: 0, y: 0 },\n      elements: [],\n      connections: [],\n      inputSignals: [],\n      options: defaultOptions,\n    });\n  }\n\n  protected static getLoadedState(gameId: GameId) {\n    const json = localStorage.getItem(getGameIdStorageKey(gameId));\n\n    if (!json) {\n      throw new Error('No saved game');\n    }\n\n    const {\n      pos,\n      elements,\n      inputSignals,\n      connections,\n      options: savedOptions,\n    } = JSON.parse(json);\n\n    const optionsNames = Object.keys(defaultOptions);\n    const options = defaults(pick(savedOptions, optionsNames), defaultOptions);\n\n    return {\n      gameId,\n      pos,\n      elements,\n      connections,\n      inputSignals,\n      options,\n    };\n  }\n\n  public static checkSavedGame(gameId: GameId): boolean {\n    const json = localStorage.getItem(getGameIdStorageKey(gameId));\n    return Boolean(json);\n  }\n\n  public static loadGame(gameId: GameId): GameModel {\n    return new GameModel(GameModel.getLoadedState(gameId));\n  }\n\n  public static removeGame(gameId: GameId) {\n    localStorage.removeItem(getGameIdStorageKey(gameId));\n  }\n\n  public static cloneGame(gameId: GameId, toGameId: GameId): void {\n    const json = localStorage.getItem(getGameIdStorageKey(gameId));\n    if (json) {\n      localStorage.setItem(getGameIdStorageKey(toGameId), json);\n    }\n  }\n\n  public underWatch = false;\n  public needTriggerUpdate = false;\n\n  private readonly gameId: GameId;\n  private drawHandler?: () => void;\n  private destroying = false;\n\n  private elements: Element[];\n  private connections: Connection[];\n  private inputSignals: boolean[];\n  private pos: Point;\n  private options: Options;\n  private hoverElement: HoverElement | undefined;\n  private focusElement: FocusElement | undefined;\n  private wireElement: WireElement | undefined;\n  private movingElement: ElementPointer | undefined;\n  private mousePos: Point | undefined;\n  private mouseState: MouseState;\n  private panState: PanState;\n  private lastStateSnapshot:\n    | {\n        cmpState: CmpGameModelState;\n        state: GameModelState;\n      }\n    | undefined;\n\n  public stateListeners: {\n    forceUpdate: () => void;\n    selector: (state: GameModelState) => unknown;\n    lastSelectedValue: unknown | undefined;\n    actualSelectedValue: { value: unknown } | undefined;\n    isActual: boolean;\n  }[];\n\n  private constructor({\n    gameId,\n    elements,\n    connections,\n    inputSignals,\n    pos,\n    options,\n  }: {\n    gameId: GameId;\n    elements: Element[];\n    connections: Connection[];\n    inputSignals: boolean[];\n    pos: Point;\n    options: Options;\n  }) {\n    this.gameId = gameId;\n\n    this.elements = elements;\n    this.connections = connections;\n    this.inputSignals = inputSignals;\n    this.pos = pos;\n    this.options = options;\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    window.gameModel = this;\n\n    this.hoverElement = undefined;\n    this.focusElement = undefined;\n    this.wireElement = undefined;\n    this.movingElement = undefined;\n    this.mouseState = {\n      isMouseDown: false,\n    };\n    this.panState = {\n      isPan: false,\n    };\n    this.mousePos = undefined;\n    this.stateListeners = [];\n    this.lastStateSnapshot = undefined;\n  }\n\n  public destroy() {\n    this.destroying = true;\n    this.saveGameThrottled.flush();\n    this.clearState();\n    this.drawHandler = undefined;\n  }\n\n  public setDrawHandler(drawHandler: (() => void) | undefined) {\n    this.drawHandler = drawHandler;\n  }\n\n  public saveGame(): void {\n    localStorage.setItem(\n      getGameIdStorageKey(this.gameId),\n      JSON.stringify({\n        pos: this.pos,\n        elements: this.elements,\n        inputSignals: this.inputSignals,\n        connections: this.connections,\n        options: this.options,\n      }),\n    );\n  }\n\n  private saveGameThrottled = throttle(this.saveGame, AUTO_SAVE_INTERVAL, {\n    leading: false,\n    trailing: true,\n  });\n\n  public getState(): GameModelState {\n    const cmpState: CmpGameModelState = {\n      elements: this.elements,\n      connections: this.connections,\n      inputSignals: this.inputSignals,\n      pos: this.pos,\n      options: this.options,\n      hoverElement: this.hoverElement,\n      focusElement: this.focusElement,\n      wireElement: this.wireElement,\n      movingElement: this.movingElement,\n      panState: this.panState,\n    };\n\n    if (\n      !this.lastStateSnapshot ||\n      !shallowequal(cmpState, this.lastStateSnapshot.cmpState)\n    ) {\n      this.lastStateSnapshot = {\n        cmpState,\n        state: {\n          ...cmpState,\n          cursor: this.getCursor(),\n          nodesSimulation: this.getSimulation(),\n        },\n      };\n    }\n\n    return this.lastStateSnapshot.state;\n  }\n\n  @watch\n  public deleteElementInFocus(): void {\n    const focusTarget = this.focusElement;\n\n    if (!focusTarget) {\n      return;\n    }\n\n    switch (focusTarget.type) {\n      case ObjectType.ELEMENT: {\n        this.connections = this.connections.filter(\n          ([p1, p2]) =>\n            p1.elId !== focusTarget.elId && p2.elId !== focusTarget.elId,\n        );\n\n        const element = this.elements.find(({ id }) => id === focusTarget.elId);\n\n        if (!element) {\n          throw new Error();\n        }\n\n        if (element.type === ElementType.INPUT) {\n          const inputIndex = this.elements\n            .filter(({ type }) => type === ElementType.INPUT)\n            .indexOf(element);\n\n          this.inputSignals = dropIndex(this.inputSignals, inputIndex);\n        }\n\n        this.elements = without(this.elements, element);\n        break;\n      }\n      case ObjectType.CONNECTION:\n        this.connections = dropIndex(\n          this.connections,\n          focusTarget.connectionIndex,\n        );\n        break;\n    }\n\n    this.focusElement = undefined;\n  }\n\n  @draw\n  public updateInputSignals(inputSignals: boolean[]): void {\n    this.inputSignals = inputSignals;\n  }\n\n  @draw\n  public updateOptions(options: Options): void {\n    this.options = options;\n  }\n\n  public onMouseDown(): void {\n    if (this.mouseState.isMouseDown) {\n      this.onMouseUp();\n    }\n\n    this.mouseState.isMouseDown = true;\n  }\n\n  @watch\n  public onMouseMove({\n    position: { x, y },\n    movement: { x: dX, y: dY },\n  }: {\n    position: Point;\n    movement: Point;\n  }): void {\n    this.mousePos = {\n      x,\n      y,\n    };\n\n    this.checkHover();\n\n    const isMoving = Boolean(this.movingElement);\n\n    if (this.mouseState.isMouseDown) {\n      if (\n        !isMoving &&\n        !this.wireElement &&\n        this.hoverElement &&\n        this.hoverElement.type === ObjectType.PIN\n      ) {\n        this.startWiring({\n          elId: this.hoverElement.elId,\n          pinIndex: this.hoverElement.pinIndex,\n        });\n      }\n\n      if (\n        !isMoving &&\n        !this.wireElement &&\n        this.hoverElement &&\n        this.hoverElement.type === ObjectType.ELEMENT\n      ) {\n        this.movingElement = {\n          elId: this.hoverElement.elId,\n        };\n\n        this.focusElement = {\n          type: ObjectType.ELEMENT,\n          elId: this.hoverElement.elId,\n        };\n      }\n\n      if (!this.wireElement && !this.movingElement && !this.panState.isPan) {\n        this.panState = {\n          isPan: true,\n        };\n      }\n\n      const { movingElement } = this;\n      if (movingElement) {\n        this.updateElement(movingElement.elId, (el) => {\n          el.pos.x += dX;\n          el.pos.y += dY;\n        });\n      } else if (!this.wireElement) {\n        this.pos = {\n          x: this.pos.x + dX,\n          y: this.pos.y + dY,\n        };\n      }\n    } else if (this.panState.isPan) {\n      this.panState = {\n        isPan: false,\n      };\n    }\n\n    if (this.wireElement) {\n      this.wireElement = im(this.wireElement, (wire) => {\n        if (!this.mousePos) {\n          wire.pullPos = undefined;\n          return;\n        }\n\n        const x = this.mousePos.x - this.pos.x;\n        const y = this.mousePos.y - this.pos.y;\n\n        if (wire.pullPos) {\n          wire.pullPos.x = x;\n          wire.pullPos.y = y;\n        } else {\n          wire.pullPos = { x, y };\n        }\n      });\n    }\n  }\n\n  @watch\n  public onMouseUp() {\n    this.mouseState = {\n      isMouseDown: false,\n    };\n\n    if (this.focusElement && !this.wireElement && !this.movingElement) {\n      this.focusElement = undefined;\n    }\n\n    if (this.movingElement) {\n      this.movingElement = undefined;\n    }\n\n    if (this.panState.isPan) {\n      this.panState = {\n        isPan: false,\n      };\n    }\n\n    if (this.wireElement) {\n      if (\n        this.hoverElement &&\n        this.hoverElement.type === ObjectType.PIN &&\n        this.wireElement.elId !== this.hoverElement.elId\n      ) {\n        this.connections = [\n          ...this.connections,\n          [\n            {\n              elId: this.hoverElement.elId,\n              pinIndex: this.hoverElement.pinIndex,\n            },\n            {\n              elId: this.wireElement.elId,\n              pinIndex: this.wireElement.pinIndex,\n            },\n          ],\n        ];\n      }\n\n      this.wireElement = undefined;\n    } else if (!this.wireElement) {\n      if (this.hoverElement && this.hoverElement.type === ObjectType.PIN) {\n        this.startWiring({\n          elId: this.hoverElement.elId,\n          pinIndex: this.hoverElement.pinIndex,\n        });\n      }\n\n      if (this.hoverElement) {\n        if (this.hoverElement.type === ObjectType.ELEMENT) {\n          if (\n            !this.focusElement ||\n            this.focusElement.type !== ObjectType.ELEMENT ||\n            this.focusElement.elId !== this.hoverElement.elId\n          ) {\n            this.focusElement = {\n              type: ObjectType.ELEMENT,\n              elId: this.hoverElement.elId,\n            };\n          }\n        } else if (this.hoverElement.type === ObjectType.CONNECTION) {\n          if (\n            !this.focusElement ||\n            this.focusElement.type !== ObjectType.CONNECTION ||\n            this.focusElement.connectionIndex !==\n              this.hoverElement.connectionIndex\n          ) {\n            this.focusElement = {\n              type: ObjectType.CONNECTION,\n              connectionIndex: this.hoverElement.connectionIndex,\n            };\n          }\n        }\n      }\n    }\n  }\n\n  public getCursor(): Cursor {\n    const { wireElement, hoverElement, panState } = this;\n\n    if (wireElement) {\n      return 'pointer';\n    }\n\n    if (hoverElement) {\n      switch (hoverElement.type) {\n        case ObjectType.PIN:\n        case ObjectType.CONNECTION:\n          return 'pointer';\n        case ObjectType.ELEMENT:\n          return 'move';\n      }\n\n      if (panState.isPan) {\n        return 'grabbing';\n      }\n    } else {\n      if (panState.isPan) {\n        return 'move';\n      }\n    }\n\n    return 'initial';\n  }\n\n  @draw\n  public addElement(type: ElementType) {\n    const pos = { ...this.pos };\n\n    while (this.checkOverlap(pos)) {\n      pos.x += ICON_SIZE + 20;\n    }\n\n    this.elements = [\n      ...this.elements,\n      {\n        type,\n        id: this.getNextId(),\n        pos,\n      },\n    ];\n\n    this.inputSignals = [...this.inputSignals, false];\n  }\n\n  @watch\n  private startWiring({\n    elId,\n    pinIndex,\n  }: {\n    elId: ElementId;\n    pinIndex: number;\n  }) {\n    this.focusElement = {\n      type: ObjectType.ELEMENT,\n      elId,\n    };\n\n    this.wireElement = {\n      elId,\n      pinIndex,\n      pullPos: this.mousePos,\n    };\n  }\n\n  @watch\n  public resetCursorState(): void {\n    this.movingElement = undefined;\n    this.wireElement = undefined;\n\n    if (this.mouseState.isMouseDown) {\n      this.mouseState = {\n        isMouseDown: false,\n      };\n    }\n\n    if (this.panState.isPan) {\n      this.panState = {\n        isPan: false,\n      };\n    }\n  }\n\n  public triggerUpdate() {\n    if (this.destroying) {\n      return;\n    }\n\n    if (this.drawHandler) {\n      this.drawHandler();\n    }\n\n    this.saveGameThrottled();\n\n    const state = this.getState();\n\n    for (const listener of this.stateListeners) {\n      listener.isActual = false;\n    }\n\n    for (const listener of this.stateListeners) {\n      if (listener.isActual) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      const { forceUpdate, selector, lastSelectedValue } = listener;\n\n      const selectedValue = selector(state);\n\n      if (!shallowequal(selectedValue, lastSelectedValue)) {\n        listener.actualSelectedValue = { value: selectedValue };\n        forceUpdate();\n      }\n    }\n\n    for (const listener of this.stateListeners) {\n      listener.actualSelectedValue = undefined;\n    }\n  }\n\n  @draw\n  public clearState() {\n    this.pos = { x: 0, y: 0 };\n    this.elements = [];\n    this.connections = [];\n    this.inputSignals = [];\n    this.hoverElement = undefined;\n    this.focusElement = undefined;\n    this.movingElement = undefined;\n    this.wireElement = undefined;\n    this.panState.isPan = false;\n    this.mouseState.isMouseDown = false;\n  }\n\n  @draw\n  public reloadFromSave() {\n    try {\n      const { elements, connections, pos, options, inputSignals } =\n        GameModel.getLoadedState(this.gameId);\n\n      this.clearState();\n\n      this.elements = elements;\n      this.connections = connections;\n      this.pos = pos;\n      this.options = options;\n      this.inputSignals = inputSignals;\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(\"Can't load state:\", error);\n    }\n  }\n\n  @watch\n  private updateElement(\n    elId: ElementId,\n    callback: (el: Element) => void,\n  ): void {\n    this.elements = im(this.elements, (elements) => {\n      const el = elements.find((el) => el.id === elId);\n\n      if (!el) {\n        throw new Error(`Element ${elId} is not found`);\n      }\n\n      callback(el);\n    });\n  }\n\n  @watch\n  private checkHover(): void {\n    if (!this.mousePos) {\n      this.hoverElement = undefined;\n      return;\n    }\n\n    const point = subtract(this.mousePos, this.pos);\n\n    const hoverElement =\n      this.checkPinHover(point) ||\n      this.checkElementHover(point) ||\n      this.checkConnectionHover(point);\n\n    if (!shallowequal(this.hoverElement, hoverElement)) {\n      this.hoverElement = hoverElement;\n    }\n  }\n\n  private checkPinHover({ x, y }: Point): HoverElement | undefined {\n    for (const element of this.elements) {\n      const { pins } = elementsDescriptions[element.type];\n\n      const x0 = element.pos.x - ICON_SIZE / 2;\n      const y0 = element.pos.y - ICON_SIZE / 2;\n\n      for (const pin of pins) {\n        if (\n          (x0 + pin.pos.x * ICON_SIZE - x) ** 2 +\n            (y0 + pin.pos.y * ICON_SIZE - y) ** 2 <\n          (PIN_DOT_RADIUS + 4) ** 2\n        ) {\n          return {\n            type: ObjectType.PIN,\n            elId: element.id,\n            pinIndex: pins.indexOf(pin),\n          };\n        }\n      }\n    }\n    return undefined;\n  }\n\n  private checkElementHover({ x, y }: Point): HoverElement | undefined {\n    for (const element of this.elements) {\n      const x0 = element.pos.x - ICON_SIZE / 2;\n      const y0 = element.pos.y - ICON_SIZE / 2;\n\n      if (x > x0 && x < x0 + ICON_SIZE && y > y0 && y < y0 + ICON_SIZE) {\n        return {\n          type: ObjectType.ELEMENT,\n          elId: element.id,\n        };\n      }\n    }\n    return undefined;\n  }\n\n  private checkConnectionHover({ x, y }: Point): HoverElement | undefined {\n    for (const connection of this.connections) {\n      const [p1, p2] = connection;\n\n      const point1 = this.getConnectionPinPosition(p1);\n      const point2 = this.getConnectionPinPosition(p2);\n\n      const shiftedPoint2 = subtract(point2, point1);\n      const shiftedMouse = subtract({ x, y }, point1);\n\n      const a = Math.atan2(shiftedPoint2.y, shiftedPoint2.x);\n\n      const rotatedPoint2 = rotate(shiftedPoint2, -a);\n      const rotatedMouse = rotate(shiftedMouse, -a);\n\n      const GAP = 10;\n\n      if (\n        rotatedMouse.x >= -GAP &&\n        rotatedMouse.x <= rotatedPoint2.x + GAP &&\n        rotatedMouse.y > -GAP &&\n        rotatedMouse.y < GAP\n      ) {\n        return {\n          type: ObjectType.CONNECTION,\n          connectionIndex: this.connections.indexOf(connection),\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private applyHoverElement(element: HoverElement): void {\n    // before set check if already hovered\n    if (!shallowequal(this.hoverElement, element)) {\n      this.hoverElement = element;\n    }\n  }\n\n  private getConnectionPinPosition({\n    elId,\n    pinIndex,\n  }: {\n    elId: ElementId;\n    pinIndex: number;\n  }): Coords {\n    const el = this.getElById(elId);\n\n    const pin = elementsDescriptions[el.type].pins[pinIndex];\n\n    return {\n      x: el.pos.x + (pin.pos.x - 0.5) * ICON_SIZE,\n      y: el.pos.y + (pin.pos.y - 0.5) * ICON_SIZE,\n    };\n  }\n\n  private getElById(id: ElementId): Element {\n    const el = this.elements.find((el) => el.id === id);\n\n    if (!el) {\n      throw new Error('Element not found');\n    }\n\n    return el;\n  }\n\n  private checkOverlap(point: Coords): boolean {\n    for (const { pos } of this.elements) {\n      if (\n        (pos.x - point.x) ** 2 + (pos.y - point.y) ** 2 <\n        (ICON_SIZE / 2) ** 2\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private getNextId(): ElementId {\n    const lastElement = last(this.elements);\n\n    if (!lastElement) {\n      return `el1`;\n    }\n\n    const match = lastElement.id.match(/^el(\\d+)$/);\n\n    if (!match) {\n      throw new Error();\n    }\n\n    return `el${parseInt(match[1], 10) + 1}`;\n  }\n\n  public allowOpenContextMenu(): boolean {\n    return !this.hoverElement && !this.wireElement && !this.panState.isPan;\n  }\n\n  private getSimulation() {\n    if (!this.options.simulate) {\n      return undefined;\n    }\n\n    return getNodesSimulationState(\n      this.elements,\n      this.connections,\n      this.inputSignals,\n    );\n  }\n}\n\nexport function useGameState<T>(\n  gameModel: GameModel,\n  selector: (gameState: GameModelState) => T,\n): T {\n  const forceUpdate = useForceUpdate();\n\n  const already = gameModel.stateListeners.find(\n    (listener) => listener.forceUpdate === forceUpdate,\n  );\n\n  const selectorHandler = useHandler(selector);\n\n  const gameState = gameModel.getState();\n\n  if (already) {\n    already.isActual = true;\n    let selectedValue;\n\n    if (already.actualSelectedValue) {\n      selectedValue = already.actualSelectedValue.value as T;\n    } else {\n      selectedValue = selectorHandler(gameState);\n    }\n\n    already.lastSelectedValue = selectedValue;\n    already.isActual = true;\n\n    return selectedValue;\n  }\n\n  const selectedValue = selectorHandler(gameState);\n\n  gameModel.stateListeners.push({\n    forceUpdate,\n    selector: selectorHandler,\n    actualSelectedValue: undefined,\n    lastSelectedValue: selectedValue,\n    isActual: true,\n  });\n\n  return selectedValue;\n}\n","import { useEffect } from 'react';\n\nimport { useHandler } from 'hooks/useHandler';\n\nexport function useWindowEvent(\n  eventName: string,\n  callback: (...args: unknown[]) => void,\n) {\n  const func = useHandler(callback);\n\n  useEffect(() => {\n    window.addEventListener(eventName, func, false);\n\n    return () => {\n      window.removeEventListener(eventName, func, false);\n    };\n  }, [eventName, func]);\n}\n","import { useRef } from 'react';\n\nexport function useRefState<D>(value: D): D {\n  const ref = useRef<D>(value);\n  return ref.current;\n}\n","import { Element, ElementType } from './types';\n\nconst INPUT_LITERALS = 'ABCDEFGHIJ';\nconst OUTPUT_LITERALS = 'YZXWVUTSRQ';\n\nexport function getLiteralForSignalByIndex({\n  elementsCount,\n  index,\n  isInput,\n  isVector,\n}: {\n  elementsCount: number;\n  index: number;\n  isInput: boolean;\n  isVector: boolean;\n}) {\n  const charVariants = isInput ? INPUT_LITERALS : OUTPUT_LITERALS;\n\n  if (!isVector && elementsCount <= charVariants.length) {\n    return charVariants.charAt(index);\n  }\n\n  return isInput ? `I${index}` : `Y${index}`;\n}\n\nexport function getLiteralForSignal(\n  elements: Element[],\n  element: Element,\n  isVector = false,\n): string {\n  return getLiteralForSignalByIndex({\n    elementsCount: elements.length,\n    index: elements.indexOf(element),\n    isInput: element.type === ElementType.INPUT,\n    isVector,\n  });\n}\n","import {\n  Assets,\n  BoxSize,\n  Element,\n  ElementId,\n  ElementType,\n  ObjectType,\n} from 'common/types';\nimport { getLiteralForSignal } from 'common/common';\nimport {\n  elementsDescriptions,\n  FOCUS_SIZE,\n  ICON_SIZE,\n  PIN_DOT_RADIUS,\n} from 'common/data';\nimport { GameModelState } from 'models/GameModel';\nimport { getPinId, NodePowerState, PinId } from './simulation';\n\nexport function render(\n  ctx: CanvasRenderingContext2D,\n  {\n    gameState,\n    size,\n    densityFactor,\n    assets,\n    tick,\n  }: {\n    gameState: GameModelState;\n    size: BoxSize;\n    densityFactor: number;\n    assets: Assets;\n    tick: number;\n  },\n) {\n  const {\n    pos,\n    elements,\n    connections,\n    focusElement,\n    hoverElement,\n    wireElement,\n    options,\n    nodesSimulation,\n  } = gameState;\n\n  function getElById(elId: ElementId): Element {\n    const el = elements.find((el) => el.id === elId);\n\n    if (!el) {\n      throw new Error(`Element ${elId} is not found`);\n    }\n\n    return el;\n  }\n\n  const simulationPins = new Map<PinId, NodePowerState>();\n\n  if (nodesSimulation) {\n    for (const node of nodesSimulation) {\n      for (const pin of node.pins) {\n        simulationPins.set(pin, node.state);\n      }\n    }\n  }\n\n  ctx.save();\n  ctx.clearRect(0, 0, size.width * densityFactor, size.height * densityFactor);\n\n  if (densityFactor !== 1) {\n    ctx.scale(densityFactor, densityFactor);\n  }\n\n  ctx.translate(\n    Math.floor(size.width / 2) + pos.x,\n    Math.floor(size.height / 2) + pos.y,\n  );\n\n  if (options.debugDrawAxis) {\n    ctx.save();\n\n    ctx.lineWidth = 1;\n    ctx.textBaseline = 'middle';\n    ctx.textAlign = 'center';\n    ctx.font = '15px sans-serif';\n    ctx.fillStyle = '#333';\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(100, 0);\n    ctx.moveTo(95, -5);\n    ctx.lineTo(100, 0);\n    ctx.moveTo(95, 5);\n    ctx.lineTo(100, 0);\n    ctx.strokeStyle = '#0f0';\n    ctx.stroke();\n    ctx.fillText('X', 90, 15);\n\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(0, 100);\n    ctx.moveTo(-5, 95);\n    ctx.lineTo(0, 100);\n    ctx.moveTo(5, 95);\n    ctx.lineTo(0, 100);\n    ctx.strokeStyle = '#00f';\n    ctx.stroke();\n    ctx.fillText('Y', 12, 90);\n\n    ctx.restore();\n  }\n\n  for (const element of elements) {\n    const { pos } = element;\n\n    const isHover =\n      hoverElement &&\n      hoverElement.type === ObjectType.ELEMENT &&\n      element.id === hoverElement.elId;\n\n    const isFocus =\n      focusElement &&\n      focusElement.type === ObjectType.ELEMENT &&\n      focusElement.elId === element.id;\n\n    if (isHover || isFocus) {\n      ctx.save();\n\n      if (isHover) {\n        ctx.strokeStyle = isFocus ? '#7f7fff' : '#e5e5e5';\n        ctx.lineWidth = 3;\n      } else {\n        ctx.strokeStyle = '#bebeff';\n        ctx.lineWidth = 2;\n      }\n\n      ctx.strokeRect(\n        pos.x - FOCUS_SIZE / 2,\n        pos.y - FOCUS_SIZE / 2,\n        FOCUS_SIZE,\n        FOCUS_SIZE,\n      );\n      ctx.restore();\n    }\n  }\n\n  let index = 0;\n  for (const [p1, p2] of connections) {\n    const el1 = getElById(p1.elId);\n    const el2 = getElById(p2.elId);\n\n    const nodeState = simulationPins.get(getPinId(p1));\n\n    const pin1 = elementsDescriptions[el1.type].pins[p1.pinIndex];\n    const pin2 = elementsDescriptions[el2.type].pins[p2.pinIndex];\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(\n      el1.pos.x - ICON_SIZE / 2 + pin1.pos.x * ICON_SIZE,\n      el1.pos.y - ICON_SIZE / 2 + pin1.pos.y * ICON_SIZE,\n    );\n    ctx.lineTo(\n      el2.pos.x - ICON_SIZE / 2 + pin2.pos.x * ICON_SIZE,\n      el2.pos.y - ICON_SIZE / 2 + pin2.pos.y * ICON_SIZE,\n    );\n\n    const isHovered =\n      hoverElement &&\n      hoverElement.type === ObjectType.CONNECTION &&\n      hoverElement.connectionIndex === index;\n\n    const isInFocus =\n      focusElement &&\n      focusElement.type === ObjectType.CONNECTION &&\n      focusElement.connectionIndex === index;\n\n    let lineWidth = 1;\n\n    if (isHovered || isInFocus) {\n      lineWidth = 3;\n    } else if (nodeState === NodePowerState.SHORT_CIRCUIT) {\n      lineWidth = 2;\n    }\n\n    let color = '#333';\n    let drawDash = false;\n\n    if (nodeState === NodePowerState.SHORT_CIRCUIT) {\n      color = '#f00';\n    } else if (nodeState === NodePowerState.POWER) {\n      color = '#ff9038';\n      drawDash = true;\n    } else if (nodeState === NodePowerState.GROUND) {\n      color = '#aaaaff';\n      drawDash = true;\n    } else if (isHovered && isInFocus) {\n      color = '#8080ff';\n    } else if (isInFocus) {\n      color = '#bfbfff';\n    }\n\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n\n    if (drawDash && !isHovered) {\n      ctx.setLineDash(tick % 2 ? [6, 6] : [0, 6, 6, 0]);\n    }\n\n    ctx.stroke();\n\n    ctx.restore();\n\n    index += 1;\n  }\n\n  if (wireElement) {\n    const { elId, pinIndex } = wireElement;\n    const el = getElById(elId);\n\n    const { pos } = elementsDescriptions[el.type].pins[pinIndex];\n\n    const x0 = pos.x * ICON_SIZE + el.pos.x - ICON_SIZE / 2;\n    const y0 = pos.y * ICON_SIZE + el.pos.y - ICON_SIZE / 2;\n\n    if (wireElement.pullPos) {\n      const { x, y } = wireElement.pullPos;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x, y);\n      ctx.strokeStyle = '#888';\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  for (const element of elements) {\n    const { id, type, pos } = element;\n\n    if (type === ElementType.INPUT || type === ElementType.OUTPUT) {\n      const char = getLiteralForSignal(\n        elements.filter((el) => el.type === type),\n        element,\n        type === ElementType.INPUT\n          ? options.isInputVector\n          : options.isOutputVector,\n      );\n\n      ctx.save();\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = '24px sans-serif';\n      if (type === ElementType.INPUT) {\n        ctx.fillText(char, pos.x, pos.y - 10);\n      } else {\n        ctx.fillText(char, pos.x + 6, pos.y);\n      }\n      ctx.restore();\n    } else {\n      const [main, fallback]: ['x1', 'x2'] | ['x2', 'x1'] =\n        densityFactor > 1.5 ? ['x2', 'x1'] : ['x1', 'x2'];\n\n      const img = assets[main].images[type] ?? assets[fallback].images[type];\n\n      if (img) {\n        const x0 = pos.x - ICON_SIZE / 2;\n        const y0 = pos.y - ICON_SIZE / 2;\n\n        ctx.drawImage(img, x0, y0, ICON_SIZE, ICON_SIZE);\n      }\n    }\n\n    if (options.debugDrawId) {\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = '16px sans-serif';\n      ctx.fillText(id, pos.x + ICON_SIZE / 2 - 6, pos.y - ICON_SIZE / 2 + 6);\n    }\n\n    const { pins } = elementsDescriptions[type];\n    let i = 0;\n\n    for (const pin of pins) {\n      const isHovered =\n        hoverElement &&\n        hoverElement.type === ObjectType.PIN &&\n        hoverElement.elId === element.id &&\n        hoverElement.pinIndex === i;\n\n      const isWire =\n        wireElement &&\n        wireElement.elId === element.id &&\n        wireElement.pinIndex === i;\n\n      ctx.beginPath();\n      ctx.arc(\n        pos.x + (pin.pos.x - 0.5) * ICON_SIZE,\n        pos.y + (pin.pos.y - 0.5) * ICON_SIZE,\n        isHovered ? PIN_DOT_RADIUS + 1 : PIN_DOT_RADIUS,\n        0,\n        Math.PI * 2,\n      );\n      ctx.closePath();\n\n      const nodeState = simulationPins.get(\n        getPinId({ elId: element.id, pinIndex: i }),\n      );\n\n      let fillColor = '#fff';\n      let noBorder = false;\n\n      if (\n        [ElementType.DOT, ElementType.INPUT, ElementType.OUTPUT].includes(\n          element.type,\n        )\n      ) {\n        switch (nodeState) {\n          case NodePowerState.SHORT_CIRCUIT: {\n            fillColor = '#f00';\n            break;\n          }\n          case NodePowerState.POWER: {\n            fillColor = '#ffc59b';\n            break;\n          }\n          case NodePowerState.GROUND: {\n            fillColor = '#d4d4ff';\n            break;\n          }\n        }\n      }\n\n      if (!fillColor && (isHovered || isWire)) {\n        fillColor = isWire ? '#d66' : '#66d';\n        noBorder = true;\n      }\n\n      ctx.save();\n      ctx.fillStyle = fillColor;\n      ctx.fill();\n\n      if (!noBorder) {\n        ctx.strokeStyle = '#448';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        ctx.restore();\n      }\n\n      i += 1;\n    }\n  }\n\n  ctx.restore();\n}\n","import { useState } from 'react';\n\nimport { useDocumentEvent } from './useDocumentEvent';\n\nexport function usePageActive(): boolean {\n  const [isActive, setActive] = useState(true);\n\n  useDocumentEvent('visibilitychange', () => {\n    const newIsActive = document.visibilityState === 'visible';\n\n    if (isActive !== newIsActive) {\n      setActive(newIsActive);\n    }\n  });\n\n  return isActive;\n}\n","import { useEffect } from 'react';\n\nimport { useHandler } from 'hooks/useHandler';\n\nexport function useDocumentEvent(\n  eventName: string,\n  callback: (...args: unknown[]) => void,\n) {\n  const func = useHandler(callback);\n\n  useEffect(() => {\n    document.addEventListener(eventName, func, false);\n\n    return () => {\n      document.removeEventListener(eventName, func, false);\n    };\n  }, [eventName, func]);\n}\n","import { useEffect } from 'react';\n\nimport { usePageActive } from './usePageActive';\nimport { useLatest } from './useLatest';\n\nexport function useActivePageInterval(\n  callback: (() => void) | undefined,\n  ms: number,\n) {\n  const isActive = usePageActive();\n  const callbackRef = useLatest(callback);\n\n  useEffect(() => {\n    if (isActive && callbackRef.current) {\n      const intervalId = window.setInterval(() => {\n        if (callbackRef.current) {\n          callbackRef.current();\n        }\n      }, ms);\n\n      return () => {\n        window.clearInterval(intervalId);\n      };\n    }\n\n    return undefined;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isActive, ms, Boolean(callbackRef.current)]);\n}\n","import { styled } from 'stitches';\n\nimport { elementsDescriptions } from 'common/data';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nconst _Title = styled('h2', {\n  margin: 0,\n});\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function SchemaErrors({ gameModel }: Props) {\n  const { elements, connections } = useGameState(\n    gameModel,\n    ({ elements, connections }) => ({\n      elements,\n      connections,\n    }),\n  );\n\n  const errors = [];\n\n  for (const el of elements) {\n    const { pins } = elementsDescriptions[el.type];\n    const used = pins.map(() => false);\n\n    for (const connection of connections) {\n      for (const p of connection) {\n        if (p.elId === el.id) {\n          used[p.pinIndex] = true;\n        }\n      }\n    }\n\n    if (used.some((value) => !value)) {\n      errors.push(`Floating pins on node ${el.type}`);\n    }\n  }\n\n  if (!errors.length) {\n    return null;\n  }\n\n  return (\n    <div>\n      <_Title>Errors:</_Title>\n      {errors.map((line, i) => (\n        <div key={i}>{line}</div>\n      ))}\n    </div>\n  );\n}\n","import { styled } from 'stitches';\nimport { getLiteralForSignalByIndex } from 'common/common';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nconst _Wrapper = styled('div', {\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'stretch',\n  left: 52,\n  bottom: 0,\n  padding: 4,\n});\n\nconst _Title = styled('h2', {\n  marginRight: 8,\n  fontVariant: '20|30',\n});\n\nconst _Inputs = styled('div', {\n  display: 'flex',\n  gap: 4,\n\n  variants: {\n    reverse: {\n      true: {\n        flexDirection: 'row-reverse',\n      },\n    },\n  },\n});\n\nconst _InputLabel = styled('label', {\n  display: 'grid',\n  gridTemplateAreas: '\"A\"',\n  width: 30,\n  height: 30,\n  userSelect: 'none',\n  cursor: 'pointer',\n\n  '> *': {\n    gridArea: 'A',\n  },\n});\n\nconst _HiddenInput = styled('input', {\n  opacity: 0,\n});\n\nconst _Bg = styled('div', {\n  background: '#aaa',\n\n  'input:checked + &': {\n    background: '#0d0',\n  },\n});\n\nconst _Symbol = styled('p', {\n  textAlign: 'center',\n  fontVariant: '16|30',\n});\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function InputSignalsControl({ gameModel }: Props) {\n  const { inputSignals, options } = useGameState(\n    gameModel,\n    ({ inputSignals, options }) => ({\n      inputSignals,\n      options,\n    }),\n  );\n\n  if (!inputSignals.length) {\n    return null;\n  }\n\n  return (\n    <_Wrapper>\n      <_Title>Input signals:</_Title>\n      <_Inputs reverse={options.isInputVector}>\n        {inputSignals.map((enabled, index) => (\n          <_InputLabel key={index}>\n            <_HiddenInput\n              type=\"checkbox\"\n              checked={enabled}\n              onChange={(e) => {\n                const signals = inputSignals.map((enabled, i) =>\n                  i === index ? e.target.checked : enabled,\n                );\n\n                gameModel.updateInputSignals(signals);\n              }}\n            />\n            <_Bg />\n            <_Symbol>\n              {getLiteralForSignalByIndex({\n                elementsCount: inputSignals.length,\n                index,\n                isInput: true,\n                isVector: options.isInputVector,\n              })}\n            </_Symbol>\n          </_InputLabel>\n        ))}\n      </_Inputs>\n    </_Wrapper>\n  );\n}\n","import { styled } from 'stitches';\n\nimport { ElementType } from 'common/types';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nexport const _Wrapper = styled('div', {\n  position: 'absolute',\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 4,\n  top: 0,\n  left: 0,\n  padding: 4,\n  borderRadius: 2,\n});\n\nexport const _Button = styled('button', {\n  width: 48,\n  height: 48,\n  flexShrink: 0,\n  border: 'none',\n  color: '#333',\n  background: '#dadada',\n  fontVariant: '14|20',\n  whiteSpace: 'nowrap',\n  appearance: 'none',\n\n  '&:disabled': {\n    color: '#999',\n  },\n\n  '&:not(:disabled)': {\n    cursor: 'pointer',\n  },\n});\n\nexport const _Divider = styled('span', {\n  height: 8,\n});\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function Toolbar({ gameModel }: Props) {\n  const { focusElement, autoSaves } = useGameState(\n    gameModel,\n    ({ focusElement, options }) => ({\n      focusElement,\n      autoSaves: options.autoSaves,\n    }),\n  );\n\n  return (\n    <_Wrapper>\n      {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n      <a href=\"#\" title=\"\">\n        <_Button type=\"button\">Menu</_Button>\n      </a>\n      <_Divider />\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.POWER);\n        }}\n      >\n        DD\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.GROUND);\n        }}\n      >\n        GND\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.NPN);\n        }}\n      >\n        npn\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.PNP);\n        }}\n      >\n        pnp\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.INPUT);\n        }}\n      >\n        input\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.OUTPUT);\n        }}\n      >\n        output\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.DOT);\n        }}\n      >\n        dot\n      </_Button>\n      <_Divider />\n      <_Button\n        type=\"button\"\n        disabled={!focusElement}\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.deleteElementInFocus();\n        }}\n      >\n        delete\n      </_Button>\n      <_Divider />\n      {!autoSaves && (\n        <>\n          <_Button\n            type=\"button\"\n            onClick={(e) => {\n              e.preventDefault();\n              gameModel.reloadFromSave();\n            }}\n          >\n            Reload\n          </_Button>\n          <_Button\n            type=\"button\"\n            onClick={(e) => {\n              e.preventDefault();\n              gameModel.saveGame();\n            }}\n          >\n            Save\n          </_Button>\n        </>\n      )}\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.clearState();\n        }}\n      >\n        Clear\n      </_Button>\n    </_Wrapper>\n  );\n}\n","import { styled } from 'stitches';\n\nconst _Option = styled('label', {\n  userSelect: 'none',\n\n  '> input:not(:disabled)': {\n    cursor: 'pointer',\n  },\n});\n\ntype Props = {\n  title: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n};\n\nexport function Option({ title, checked, onChange }: Props) {\n  return (\n    <_Option>\n      <input\n        type=\"checkbox\"\n        checked={checked}\n        onChange={(e) => {\n          onChange(e.target.checked);\n        }}\n      />{' '}\n      {title}\n    </_Option>\n  );\n}\n","import { styled } from 'stitches';\nimport { Options } from 'common/types';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nimport { Option } from './Option';\n\nconst _Wrapper = styled('div', {\n  display: 'flex',\n  flexDirection: 'column',\n\n  '> *': {\n    flexShrink: 0,\n  },\n});\n\nexport const _SimulateButton = styled('button', {\n  marginBottom: 5,\n  border: '1px solid #999',\n  borderRadius: 0,\n  appearance: 'none',\n  cursor: 'pointer',\n\n  variants: {\n    active: {\n      true: {\n        color: '#fff',\n        background: 'lightgreen',\n      },\n    },\n  },\n});\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function OptionsPanel({ gameModel }: Props) {\n  const options = useGameState(gameModel, (state) => state.options);\n\n  function update(updates: Partial<Options>): void {\n    gameModel.updateOptions({\n      ...options,\n      ...updates,\n    });\n  }\n\n  function OptionControl({\n    title,\n    optionName,\n  }: {\n    title: string;\n    optionName: keyof Options;\n  }) {\n    return (\n      <Option\n        title={title}\n        checked={options[optionName]}\n        onChange={(checked) => {\n          update({ [optionName]: checked });\n        }}\n      />\n    );\n  }\n\n  return (\n    <_Wrapper>\n      <_SimulateButton\n        type=\"button\"\n        active={options.simulate}\n        onClick={(e) => {\n          e.preventDefault();\n          update({ simulate: !options.simulate });\n        }}\n      >\n        {options.simulate ? 'Simulation: ON' : 'Simulation: OFF'}\n      </_SimulateButton>\n      <OptionControl title=\"Auto saves\" optionName=\"autoSaves\" />\n      <OptionControl title=\"Debug: draw fps\" optionName=\"debugShowFps\" />\n      <OptionControl title=\"Debug: draw id\" optionName=\"debugDrawId\" />\n      <OptionControl title=\"Debug: draw axis\" optionName=\"debugDrawAxis\" />\n      <OptionControl title=\"Treat input as vector\" optionName=\"isInputVector\" />\n      <OptionControl\n        title=\"Treat output as vector\"\n        optionName=\"isOutputVector\"\n      />\n    </_Wrapper>\n  );\n}\n","import { styled } from 'stitches';\nimport { ObjectType } from 'common/types';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nexport const _Yes = styled('span', {\n  color: '#4ebd4e',\n});\n\nexport const _No = styled('span', {\n  color: '#666',\n});\n\nfunction yesNo(value: unknown) {\n  if (value) {\n    return <_Yes>yes</_Yes>;\n  }\n  return <_No>no</_No>;\n}\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function DebugPanel({ gameModel }: Props) {\n  const {\n    elements,\n    connections,\n    movingElement,\n    focusElement,\n    hoverElement,\n    wireElement,\n    panState,\n  } = useGameState(gameModel, (state) => state);\n\n  return (\n    <div>\n      <div>elements: {elements.length}</div>\n      <div>connections: {connections.length}</div>\n      <div>el moving: {yesNo(movingElement)}</div>\n      <div>\n        el in focus:{' '}\n        {yesNo(focusElement && focusElement.type === ObjectType.ELEMENT)}\n      </div>\n      <div>\n        conn in focus:{' '}\n        {yesNo(focusElement && focusElement.type === ObjectType.CONNECTION)}\n      </div>\n      <div>\n        el hover:{' '}\n        {yesNo(hoverElement && hoverElement.type === ObjectType.ELEMENT)}\n      </div>\n      <div>\n        pin hover: {yesNo(hoverElement && hoverElement.type === ObjectType.PIN)}\n      </div>\n      <div>\n        conn hover:{' '}\n        {yesNo(hoverElement && hoverElement.type === ObjectType.CONNECTION)}\n      </div>\n      <div>wiring: {yesNo(wireElement)}</div>\n      <div>drag: {yesNo(panState.isPan)}</div>\n    </div>\n  );\n}\n","import { styled } from 'stitches';\n\nexport const _App = styled('main', {\n  position: 'relative',\n  display: 'flex',\n  alignItems: 'stretch',\n  flexGrow: 1,\n  width: '100%',\n  height: '100%',\n  overflow: 'hidden',\n});\n\nexport const _CanvasWrapper = styled('div', {\n  position: 'relative',\n  flexGrow: 1,\n  overflow: 'hidden',\n});\n\nexport const _Canvas = styled('canvas', {\n  display: 'block',\n  cursor: 'initial',\n\n  variants: {\n    enableScaling: {\n      true: {\n        transformOrigin: '0 0',\n        transform: 'scale(var(--factor, 1))',\n      },\n    },\n  },\n});\n\nexport const _FpsCounter = styled('span', {\n  position: 'absolute',\n  top: 6,\n  right: 6,\n  userSelect: 'none',\n  pointerEvents: 'none',\n});\n\nexport const _Space = styled('span', {\n  flexGrow: 1,\n});\n\nexport const _Info = styled('div', {\n  display: 'none',\n\n  '@bp2': {\n    display: 'flex',\n    flexShrink: 0,\n    flexDirection: 'column',\n    flexBasis: 300,\n    padding: '16px 20px',\n    borderLeft: '1px solid #888',\n    background: '#ddd',\n    overflow: 'hidden',\n    overflowY: 'auto',\n\n    '> *:not(:last-child)': {\n      marginBottom: 16,\n    },\n  },\n});\n","import {\n  CSSProperties,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { debounce } from 'lodash-es';\n\nimport { Coords, GameId } from 'common/types';\nimport { ANIMATION_TICK, MAX_FPS } from 'common/data';\nimport { GameModel, useGameState } from 'models/GameModel';\nimport { useRefState } from 'hooks/useRefState';\nimport { useForceUpdate } from 'hooks/useForceUpdate';\nimport { useHandler } from 'hooks/useHandler';\nimport { useWindowEvent } from 'hooks/useWindowEvent';\nimport { useAssets } from 'hooks/useAssets';\nimport { getCanvasContext } from 'utils/canvas';\nimport { render } from 'utils/render';\nimport { useActivePageInterval } from 'hooks/useActivePageInterval';\nimport { SchemaErrors } from 'components/SchemaErrors';\nimport { InputSignalsControl } from 'components/InputSignalsControl';\nimport { Toolbar } from 'components/Toolbar';\nimport { OptionsPanel } from 'components/OptionsPanel';\nimport { DebugPanel } from 'components/DebugPanel';\n\nimport {\n  _App,\n  _Canvas,\n  _CanvasWrapper,\n  _FpsCounter,\n  _Info,\n  _Space,\n} from './elements';\n\ntype Props = {\n  gameId: GameId;\n};\n\nfunction getCurrentDensityFactor() {\n  return window.devicePixelRatio ?? 1;\n}\n\nexport function Simulator({ gameId }: Props) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const canvasWrapperRef = useRef<HTMLDivElement>(null);\n  const forceUpdate = useForceUpdate();\n  const [drawFps, setDrawFps] = useState(0);\n  const densityFactor = useRefState({\n    value: getCurrentDensityFactor(),\n  });\n  const tickRef = useRef(0);\n\n  const gameModel = useMemo(() => {\n    if (GameModel.checkSavedGame(gameId)) {\n      return GameModel.loadGame(gameId);\n    }\n    return GameModel.createEmptyModel(gameId);\n  }, [gameId]);\n\n  const { cursor, showFps, simulate } = useGameState(\n    gameModel,\n    ({ cursor, options }) => ({\n      cursor,\n      showFps: options.debugShowFps,\n      simulate: options.simulate,\n    }),\n  );\n\n  const fps = useRefState({ value: 0 });\n\n  useActivePageInterval(\n    showFps\n      ? () => {\n          setDrawFps(fps.value);\n          fps.value = 0;\n        }\n      : undefined,\n    1000,\n  );\n\n  const size = useRefState({ width: 0, height: 0 });\n  const assets = useAssets({\n    densityFactor: densityFactor.value,\n    draw: () => draw(),\n  });\n\n  function convertScreenCoordsToAppCoords({ x, y }: Coords): Coords {\n    return {\n      x: Math.floor(x - size.width / 2),\n      y: Math.floor(y - size.height / 2),\n    };\n  }\n\n  function actualizeDensityFactor(): boolean {\n    const factor = getCurrentDensityFactor();\n\n    if (factor !== densityFactor.value) {\n      densityFactor.value = factor;\n      forceUpdate();\n      return true;\n    }\n\n    return false;\n  }\n\n  const drawHandler = useHandler(() => {\n    if (size.width === 0) {\n      return;\n    }\n\n    if (actualizeDensityFactor()) {\n      return;\n    }\n\n    const ctx = getCanvasContext(canvasRef.current);\n\n    if (showFps) {\n      fps.value += 1;\n    }\n\n    render(ctx, {\n      gameState: gameModel.getState(),\n      size,\n      densityFactor: densityFactor.value,\n      assets,\n      tick: tickRef.current,\n    });\n  });\n\n  const draw = useMemo(() => {\n    const interval = 1000 / MAX_FPS;\n\n    return debounce(drawHandler, interval, {\n      maxWait: interval,\n      leading: true,\n      trailing: true,\n    });\n  }, [drawHandler]);\n\n  useActivePageInterval(\n    simulate\n      ? () => {\n          tickRef.current += 1;\n          draw();\n        }\n      : undefined,\n    ANIMATION_TICK,\n  );\n\n  function updateSize() {\n    const canvasWrapper = canvasWrapperRef.current;\n    const canvas = canvasRef.current;\n\n    if (!canvasWrapper || !canvas) {\n      throw new Error();\n    }\n\n    size.width = canvasWrapper.clientWidth;\n    size.height = canvasWrapper.clientHeight;\n\n    canvas.width = size.width * densityFactor.value;\n    canvas.height = size.height * densityFactor.value;\n\n    draw();\n  }\n\n  useEffect(() => {\n    gameModel.setDrawHandler(draw);\n\n    return () => {\n      gameModel.destroy();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(updateSize, [densityFactor.value]);\n\n  useWindowEvent('resize', () => {\n    setTimeout(() => {\n      actualizeDensityFactor();\n      updateSize();\n    }, 0);\n  });\n\n  return (\n    <_App>\n      <_CanvasWrapper ref={canvasWrapperRef}>\n        <_Canvas\n          ref={canvasRef}\n          enableScaling={densityFactor.value !== 1}\n          width={0}\n          height={0}\n          style={\n            {\n              '--factor': 1 / densityFactor.value,\n              cursor,\n            } as CSSProperties\n          }\n          onClick={(e) => {\n            if (e.button === 0) {\n              e.preventDefault();\n            }\n          }}\n          onMouseDown={(e) => {\n            if (e.button === 0) {\n              e.preventDefault();\n              gameModel.onMouseDown();\n            }\n          }}\n          onMouseMove={(e) => {\n            gameModel.onMouseMove({\n              position: convertScreenCoordsToAppCoords({\n                x: e.clientX,\n                y: e.clientY,\n              }),\n              movement: { x: e.movementX, y: e.movementY },\n            });\n          }}\n          onMouseUp={(e) => {\n            if (e.button === 0) {\n              e.preventDefault();\n              gameModel.onMouseUp();\n            }\n          }}\n          onMouseLeave={() => {\n            gameModel.resetCursorState();\n          }}\n          onContextMenu={(e) => {\n            if (!gameModel.allowOpenContextMenu()) {\n              e.preventDefault();\n            }\n          }}\n        />\n        {showFps && <_FpsCounter>{drawFps}</_FpsCounter>}\n      </_CanvasWrapper>\n      <Toolbar gameModel={gameModel} />\n      <InputSignalsControl gameModel={gameModel} />\n      <_Info>\n        <OptionsPanel gameModel={gameModel} />\n        {/* <TruthTable gameModel={gameModel} /> */}\n        <SchemaErrors gameModel={gameModel} />\n        <_Space />\n        <DebugPanel gameModel={gameModel} />\n      </_Info>\n    </_App>\n  );\n}\n","import { useEffect } from 'react';\n\nimport { Assets, ElementType, LoadingStatus } from 'common/types';\nimport { useRefState } from 'hooks/useRefState';\n\nexport function useAssets({\n  densityFactor,\n  draw,\n}: {\n  densityFactor: number;\n  draw: () => void;\n}): Assets {\n  const assets = useRefState<Assets>({\n    x1: { images: {}, status: LoadingStatus.NONE },\n    x2: { images: {}, status: LoadingStatus.NONE },\n  });\n\n  useEffect(() => {\n    const is2x = densityFactor > 1.5;\n\n    const assetsSet = assets[is2x ? 'x1' : 'x2'];\n\n    if (assetsSet.status !== LoadingStatus.NONE) {\n      return;\n    }\n\n    const loadImages = [\n      ElementType.PNP,\n      ElementType.NPN,\n      ElementType.POWER,\n      ElementType.GROUND,\n    ];\n\n    let remainLoad = loadImages.length;\n\n    function onLoad() {\n      remainLoad -= 1;\n\n      if (remainLoad === 0) {\n        assetsSet.status = LoadingStatus.DONE;\n        draw();\n      }\n    }\n\n    assetsSet.status = LoadingStatus.LOADING;\n\n    for (const imgName of loadImages) {\n      const image = new Image();\n      image.src = `assets/${imgName}${is2x ? '@2x' : ''}.png`;\n      image.addEventListener('load', () => {\n        assetsSet.images[imgName] = image;\n        onLoad();\n      });\n      image.addEventListener('error', onLoad);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [densityFactor]);\n\n  return assets;\n}\n","export function getCanvasContext(\n  canvas: HTMLCanvasElement | null | undefined,\n): CanvasRenderingContext2D {\n  if (!canvas) {\n    throw new Error();\n  }\n\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error();\n  }\n\n  return ctx;\n}\n","import { useMemo, useState } from 'react';\nimport { last } from 'lodash-es';\n\nimport { styled } from 'stitches';\nimport { GameId } from 'common/types';\nimport { GameModel } from 'models/GameModel';\nimport { insert } from 'utils/array';\nimport { useOnChange } from 'hooks/useOnChange';\nimport { useWindowEvent } from 'hooks/useWindowEvent';\nimport { Simulator } from 'components/Simulator';\n\nconst _Wrapper = styled('div', {\n  padding: 16,\n});\n\nconst _Title = styled('h1', {\n  margin: 0,\n});\n\nconst _GameTitle = styled('h2', {\n  fontVariant: '18|24',\n});\n\nconst _List = styled('ul', {\n  marginBottom: 10,\n});\n\nconst _ListItem = styled('li', {\n  display: 'flex',\n  alignItems: 'center',\n  padding: '2px 0',\n});\n\nconst _GameLinkWrapper = styled('p', {\n  minWidth: 140,\n  marginRight: 16,\n});\n\nconst _GameLink = styled('a', {});\n\nconst _Button = styled('button', {\n  '+ button': {\n    marginLeft: 5,\n  },\n});\n\nfunction parseGameId(\n  gameId: string,\n): { gameId: GameId; gameNumber: number } | undefined {\n  const match = gameId.match(/^[gs](\\d+)$/);\n\n  if (!match) {\n    return undefined;\n  }\n\n  return {\n    gameId: match[0] as GameId,\n    gameNumber: parseInt(match[1], 10),\n  };\n}\n\ntype GameSave = {\n  id: GameId;\n  title: string;\n};\n\nfunction getCurrentGameId(currentGames: GameSave[]): GameId | undefined {\n  const hash = (window.location.hash ?? '').trim().replace(/^#/, '');\n\n  if (hash) {\n    const game = parseGameId(hash);\n\n    if (game && currentGames.some(({ id }) => id === game.gameId)) {\n      return game.gameId;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getNextGameId(currentGames: GameSave[]): GameId {\n  const lastGame = last(currentGames);\n\n  if (!lastGame) {\n    return `s1`;\n  }\n\n  const game = parseGameId(lastGame.id);\n\n  if (!game) {\n    throw new Error();\n  }\n\n  return `s${game.gameNumber + 1}`;\n}\n\nexport function App() {\n  const savedGames = useMemo<GameSave[]>(() => {\n    const json = localStorage.getItem('sch_games');\n    if (!json) {\n      return [];\n    }\n\n    return JSON.parse(json).map((game: unknown) => {\n      if (typeof game === 'string') {\n        return {\n          id: game,\n          title: game,\n        };\n      }\n\n      return game;\n    });\n  }, []);\n  const [currentGames, setCurrentGames] = useState(savedGames);\n\n  useOnChange(() => {\n    localStorage.setItem('sch_games', JSON.stringify(currentGames));\n  }, [currentGames]);\n\n  const [currentGameId, setCurrentGameId] = useState(\n    getCurrentGameId(currentGames),\n  );\n\n  useWindowEvent('hashchange', () => {\n    const gameId = getCurrentGameId(currentGames);\n\n    if (gameId !== currentGameId) {\n      setCurrentGameId(gameId);\n    }\n  });\n\n  if (currentGameId) {\n    return <Simulator key={currentGameId} gameId={currentGameId} />;\n  }\n\n  return (\n    <_Wrapper>\n      <_Title>Schematic</_Title>\n      <_GameTitle>Current schemas:</_GameTitle>\n      <_List>\n        {currentGames.length ? (\n          currentGames.map(({ id: gameId, title }, index) => (\n            <_ListItem key={gameId}>\n              <_GameLinkWrapper>\n                <_GameLink href={`#${gameId}`}>{title}</_GameLink>\n              </_GameLinkWrapper>\n              <_Button\n                type=\"button\"\n                onClick={(e) => {\n                  e.preventDefault();\n\n                  // eslint-disable-next-line no-alert\n                  const title = window.prompt('Enter clone game name');\n\n                  if (!title || !title.trim()) {\n                    return;\n                  }\n\n                  const clonedGame = {\n                    id: getNextGameId(currentGames),\n                    title,\n                  };\n\n                  GameModel.cloneGame(gameId, clonedGame.id);\n\n                  setCurrentGames(insert(currentGames, clonedGame, index));\n                }}\n              >\n                clone\n              </_Button>\n              <_Button\n                type=\"button\"\n                onClick={(e) => {\n                  e.preventDefault();\n\n                  // eslint-disable-next-line no-alert\n                  if (window.confirm('Are you sure?')) {\n                    setCurrentGames(\n                      currentGames.filter((game) => game.id !== gameId),\n                    );\n                    GameModel.removeGame(gameId);\n                  }\n                }}\n              >\n                x\n              </_Button>\n            </_ListItem>\n          ))\n        ) : (\n          <div>no saved schemas</div>\n        )}\n      </_List>\n      <button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          const newGameId = getNextGameId(currentGames);\n\n          // eslint-disable-next-line no-alert\n          const title = window.prompt('Enter new game name');\n\n          if (!title || !title.trim()) {\n            return;\n          }\n\n          setCurrentGames([\n            ...currentGames,\n            {\n              id: newGameId,\n              title: title.trim(),\n            },\n          ]);\n\n          window.setTimeout(() => {\n            window.location.assign(`#${newGameId}`);\n          }, 0);\n        }}\n      >\n        New schema\n      </button>\n    </_Wrapper>\n  );\n}\n","import { useEffect, DependencyList, useRef } from 'react';\n\nexport function useOnChange(callback: () => void, deps: DependencyList) {\n  const initRef = useRef(false);\n\n  useEffect(() => {\n    if (!initRef.current) {\n      initRef.current = true;\n      return;\n    }\n\n    callback();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","export function insert<T>(array: T[], item: T, index: number): T[] {\n  return [...array.slice(0, index), item, ...array.slice(index)];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'normalize.css/normalize.css';\nimport './index.css';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}