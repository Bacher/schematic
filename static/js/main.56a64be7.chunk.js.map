{"version":3,"sources":["components/App/App.module.scss","components/SchemaErrors/SchemaErrors.module.scss","components/Emulator/Emulator.module.scss","hooks/useOnChange.ts","hooks/useHandler.ts","hooks/useLatest.ts","hooks/useWindowEvent.ts","common/types.ts","hooks/useRefState.ts","common/data.ts","common/common.ts","components/TruthTable/TruthTable.tsx","components/SchemaErrors/SchemaErrors.tsx","components/Emulator/Emulator.tsx","hooks/useForceUpdate.ts","utils/canvas.ts","components/App/App.tsx","index.tsx","components/TruthTable/TruthTable.module.scss"],"names":["module","exports","useOnChange","callback","deps","initRef","useRef","useEffect","current","useHandler","callbackRef","some","ref","useLatest","useCallback","useWindowEvent","eventName","func","window","addEventListener","removeEventListener","ElementType","useRefState","value","elementsDescriptions","PNP","pins","pos","x","y","NPN","POWER","GROUND","INPUT","OUTPUT","DOT","INPUT_LITERALS","OUTPUT_LITERALS","getLiteralForSignal","elements","element","isVector","index","indexOf","charVariants","type","length","charAt","TruthTable","options","onOptionsChange","useMemo","inputs","filter","el","outputs","renderInputs","renderOutputs","isInputVector","reverse","isOutputVector","className","styles","wrapper","option","checked","onChange","e","target","table","map","i","tableCell","Array","from","rowIndex","cellIndex","Math","floor","SchemaErrors","state","errors","used","connections","connection","p","elId","id","pinIndex","push","title","line","LoadingStatus","NodeType","ICON_SIZE","FOCUS_SIZE","subtract","p1","p2","rotate","point","a","sinA","sin","cosA","cos","getNextId","lastElement","match","Error","parseInt","yesNo","yes","no","Emulator","draw","gameId","canvasRef","canvasWrapperRef","forceUpdate","incRef","useState","setInc","useForceUpdate","cursor","setCursor","setOptions","densityFactor","factor","devicePixelRatio","size","width","height","assets","x1","images","status","NONE","x2","mousePos","hoverElement","undefined","focusElement","movingElement","wireElement","source","mouseState","isMouseDown","panState","isPan","convertScreenCoordsToAppCoords","clearState","loadGameState","json","localStorage","getItem","JSON","parse","savedPos","savedOptions","setTimeout","intervalId","setInterval","clearInterval","getElById","find","getConnectionPinPosition","pin","actualizeDensityFactor","updateSize","app","canvas","clientWidth","clientHeight","checkOverlap","addElement","loadAssets","is2x","assetsSet","loadImages","remainLoad","LOADING","imgName","image","Image","src","onLoad","DONE","startWiring","ELEMENT","ctx","getContext","getCanvasContext","hoverTarget","save","clearRect","scale","translate","lineWidth","textBaseline","textAlign","font","fillStyle","beginPath","moveTo","lineTo","strokeStyle","stroke","fillText","restore","strokeRect","el1","el2","pin1","pin2","isHovered","CONNECTION","connectionIndex","isInFocus","x0","y0","currentCursor","char","main","fallback","img","drawImage","activePin","isWire","arc","PIN_DOT_RADIUS","PI","closePath","fill","onMouseUp","preventDefault","button","needRepaint","canvasWrapper","cn","canvasScale","style","onClick","onMouseDown","onMouseMove","clientX","clientY","flag","hoverFound","hoverConnectionFound","point1","shiftedPoint2","shiftedMouse","atan2","rotatedPoint2","rotatedMouse","checkHover","isMoving","Boolean","movementX","movementY","onMouseLeave","resetCursorState","onContextMenu","panel","divider","setItem","stringify","console","info","href","update","space","debugPanel","getCurrentGameId","allowedIds","hash","location","trim","replace","includes","App","savedGames","currentGames","setCurrentGames","currentGameId","setCurrentGameId","gamesTitle","removeButton","confirm","removeItem","newGameId","lastId","getNextGameId","assign","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56a64be7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1Jn2B\",\"title\":\"App_title__2C-7r\",\"gamesTitle\":\"App_gamesTitle__zqWFJ\",\"removeButton\":\"App_removeButton__1M5gF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"SchemaErrors_title__DGpx-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Emulator_app__T00XQ\",\"panel\":\"Emulator_panel__NbdHB\",\"button\":\"Emulator_button__3x9P5\",\"canvasWrapper\":\"Emulator_canvasWrapper__1jUgz\",\"canvas\":\"Emulator_canvas__18vZ6\",\"canvasScale\":\"Emulator_canvasScale__1gfv0\",\"info\":\"Emulator_info__XN-lN\",\"divider\":\"Emulator_divider__1O1xo\",\"space\":\"Emulator_space__3sZL6\",\"yes\":\"Emulator_yes__2HVG8\",\"no\":\"Emulator_no__3K5j9\"};","import { useEffect, DependencyList, useRef } from 'react';\n\nexport function useOnChange(callback: () => void, deps: DependencyList) {\n  const initRef = useRef(false);\n\n  useEffect(() => {\n    if (!initRef.current) {\n      initRef.current = true;\n      return;\n    }\n\n    callback();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","import { useCallback } from 'react';\nimport { useLatest } from './useLatest';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useHandler<F extends (...args: any) => any>(callback: F): F {\n  const callbackRef = useLatest<F>(callback);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ((...args: any) => callbackRef.current(...args)) as any,\n    [],\n  );\n}\n","import { useRef } from 'react';\n\nexport function useLatest<T>(some: T): { current: T } {\n  const ref = useRef(some);\n  ref.current = some;\n  return ref;\n}\n","import { useEffect } from 'react';\n\nimport { useHandler } from 'hooks/useHandler';\n\nexport function useWindowEvent(\n  eventName: string,\n  callback: (...args: unknown[]) => void,\n) {\n  const func = useHandler(callback);\n\n  useEffect(() => {\n    window.addEventListener(eventName, func, false);\n\n    return () => {\n      window.removeEventListener(eventName, func, false);\n    };\n  }, [eventName, func]);\n}\n","export type GameId = `g${number}`;\n\nexport enum ElementType {\n  PNP = 'pnp',\n  NPN = 'npn',\n  POWER = 'power',\n  GROUND = 'ground',\n  INPUT = 'input',\n  OUTPUT = 'output',\n  DOT = 'dot',\n}\n\nexport type Coords = {\n  x: number;\n  y: number;\n};\n\nexport type Point = {\n  x: number;\n  y: number;\n};\n\nexport type ElementId = `el${number}`;\n\nexport type Element = {\n  type: ElementType;\n  id: ElementId;\n  pos: Coords;\n};\n\nexport type ConnectionPin = { elId: ElementId; pinIndex: number };\n\nexport type Connection = [ConnectionPin, ConnectionPin];\n\nexport type Pin = {\n  pos: Coords;\n};\n\nexport type ElementDescription = {\n  pins: Pin[];\n};\n\nexport type GameState = {\n  elements: Element[];\n  connections: Connection[];\n};\n\nexport type Options = {\n  isInputVector: boolean;\n  isOutputVector: boolean;\n};\n","import { useRef } from 'react';\n\nexport function useRefState<D>(value: D): D {\n  const ref = useRef<D>(value);\n  return ref.current;\n}\n","import { ElementType, ElementDescription } from './types';\n\nexport const elementsDescriptions: Record<ElementType, ElementDescription> = {\n  [ElementType.PNP]: {\n    pins: [\n      { pos: { x: 0.47, y: 0.94 } },\n      { pos: { x: -0.07, y: 0.32 } },\n      { pos: { x: 1.05, y: 0.32 } },\n    ],\n  },\n  [ElementType.NPN]: {\n    pins: [\n      { pos: { x: 0.47, y: 1 } },\n      { pos: { x: -0.07, y: 0.33 } },\n      { pos: { x: 1.05, y: 0.32 } },\n    ],\n  },\n  [ElementType.POWER]: {\n    pins: [{ pos: { x: 0.52, y: 0.8 } }],\n  },\n  [ElementType.GROUND]: {\n    pins: [{ pos: { x: 0.46, y: 0.15 } }],\n  },\n  [ElementType.INPUT]: {\n    pins: [{ pos: { x: 0.5, y: 0.8 } }],\n  },\n  [ElementType.OUTPUT]: {\n    pins: [{ pos: { x: 0.2, y: 0.5 } }],\n  },\n  [ElementType.DOT]: {\n    pins: [{ pos: { x: 0.5, y: 0.5 } }],\n  },\n};\n","import { Element, ElementType } from './types';\n\nconst INPUT_LITERALS = 'ABCDEFGHIJ';\nconst OUTPUT_LITERALS = 'YZXWVUTSRQ';\n\nexport function getLiteralForSignal(\n  elements: Element[],\n  element: Element,\n  isVector = false,\n): string {\n  const index = elements.indexOf(element);\n\n  const charVariants =\n    element.type === ElementType.INPUT ? INPUT_LITERALS : OUTPUT_LITERALS;\n\n  if (!isVector && elements.length <= charVariants.length) {\n    return charVariants.charAt(index);\n  }\n\n  return element.type === ElementType.INPUT ? `I${index}` : `Y${index}`;\n}\n","import { useMemo } from 'react';\n\nimport { getLiteralForSignal } from 'common/common';\nimport { Element, ElementType, Options } from 'common/types';\n\nimport styles from './TruthTable.module.scss';\n\ntype Props = {\n  elements: Element[];\n  options: Options;\n  onOptionsChange: (update: Partial<Options>) => void;\n};\n\nexport function TruthTable({ elements, options, onOptionsChange }: Props) {\n  const { inputs, outputs, renderInputs, renderOutputs } = useMemo(() => {\n    const inputs = elements.filter((el) => el.type === ElementType.INPUT);\n    const outputs = elements.filter((el) => el.type === ElementType.OUTPUT);\n\n    let renderInputs = inputs;\n    let renderOutputs = outputs;\n\n    if (options.isInputVector) {\n      renderInputs = [...inputs].reverse();\n    }\n\n    if (options.isOutputVector) {\n      renderOutputs = [...outputs].reverse();\n    }\n\n    return {\n      inputs,\n      outputs,\n      renderInputs,\n      renderOutputs,\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    elements,\n    elements.length,\n    options.isInputVector,\n    options.isOutputVector,\n  ]);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.options}>\n        <label className={styles.option}>\n          <input\n            type=\"checkbox\"\n            checked={options.isInputVector}\n            onChange={(e) => {\n              onOptionsChange({\n                isInputVector: e.target.checked,\n              });\n            }}\n          />{' '}\n          Treat input as vector\n        </label>\n        <label className={styles.option}>\n          <input\n            type=\"checkbox\"\n            checked={options.isOutputVector}\n            onChange={(e) => {\n              onOptionsChange({\n                isOutputVector: e.target.checked,\n              });\n            }}\n          />{' '}\n          Treat output as vector\n        </label>\n      </div>\n      <table className={styles.table}>\n        <thead>\n          <tr>\n            {renderInputs.map((el, i) => (\n              <th key={i} className={styles.tableCell}>\n                {getLiteralForSignal(inputs, el, options.isInputVector)}\n              </th>\n            ))}\n            {renderOutputs.map((el, i) => (\n              <th key={i} className={styles.tableCell}>\n                {getLiteralForSignal(outputs, el, options.isOutputVector)}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {Array.from({ length: 2 ** inputs.length }).map((el, rowIndex) => (\n            <tr key={rowIndex}>\n              {renderInputs.map((value, cellIndex) => (\n                <td key={cellIndex}>\n                  {Math.floor(rowIndex / 2 ** (inputs.length - cellIndex - 1)) %\n                    2}\n                </td>\n              ))}\n              {renderOutputs.map((value, i) => (\n                <td key={i}>Z</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import type { GameState } from 'common/types';\nimport { elementsDescriptions } from 'common/data';\n\nimport styles from './SchemaErrors.module.scss';\n\ntype Props = {\n  state: GameState;\n};\n\nexport function SchemaErrors({ state }: Props) {\n  const errors = [];\n\n  for (const el of state.elements) {\n    const { pins } = elementsDescriptions[el.type];\n    const used = pins.map(() => false);\n\n    for (const connection of state.connections) {\n      for (const p of connection) {\n        if (p.elId === el.id) {\n          used[p.pinIndex] = true;\n        }\n      }\n    }\n\n    if (used.some((value) => !value)) {\n      errors.push(`Floating pins on node ${el.type}`);\n    }\n  }\n\n  if (!errors.length) {\n    return null;\n  }\n\n  return (\n    <div>\n      <h2 className={styles.title}>Errors:</h2>\n      {errors.map((line, i) => (\n        <div key={i}>{line}</div>\n      ))}\n    </div>\n  );\n}\n","import { CSSProperties, MouseEvent, useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\n\nimport { useRefState } from 'hooks/useRefState';\nimport { useForceUpdate } from 'hooks/useForceUpdate';\nimport { useHandler } from 'hooks/useHandler';\nimport { useOnChange } from 'hooks/useOnChange';\nimport { useWindowEvent } from 'hooks/useWindowEvent';\nimport {\n  Coords,\n  Element,\n  ElementId,\n  ElementType,\n  GameId,\n  GameState,\n  Options,\n  Point,\n} from 'common/types';\nimport { elementsDescriptions } from 'common/data';\nimport { getLiteralForSignal } from 'common/common';\nimport { getCanvasContext } from 'utils/canvas';\nimport { TruthTable } from 'components/TruthTable';\nimport { SchemaErrors } from 'components/SchemaErrors';\n\nimport styles from './Emulator.module.scss';\n\nconst ICON_SIZE = 48;\nconst FOCUS_SIZE = ICON_SIZE + 4;\nconst PIN_DOT_RADIUS = 5;\n\ntype Cursor =\n  | 'move'\n  | 'pointer'\n  | 'drag'\n  | 'grab'\n  | 'grabbing'\n  | 'cross'\n  | undefined;\n\nfunction subtract(p1: Point, p2: Point): Point {\n  return {\n    x: p1.x - p2.x,\n    y: p1.y - p2.y,\n  };\n}\n\nfunction rotate(point: Point, a: number): Point {\n  const sinA = Math.sin(a);\n  const cosA = Math.cos(a);\n\n  return {\n    x: point.x * cosA - point.y * sinA,\n    y: point.x * sinA + point.y * cosA,\n  };\n}\n\nfunction getNextId(state: GameState): ElementId {\n  const lastElement = state.elements[state.elements.length - 1];\n\n  if (!lastElement) {\n    return `el1`;\n  }\n\n  const match = lastElement.id.match(/^el(\\d+)$/);\n\n  if (!match) {\n    throw new Error();\n  }\n\n  return `el${parseInt(match[1], 10) + 1}`;\n}\n\nfunction yesNo(value: unknown) {\n  if (value) {\n    return <span className={styles.yes}>yes</span>;\n  }\n  return <span className={styles.no}>no</span>;\n}\n\nenum LoadingStatus {\n  NONE,\n  LOADING,\n  DONE,\n}\n\ntype AssetSet = {\n  images: Record<string, HTMLImageElement>;\n  status: LoadingStatus;\n};\n\nenum NodeType {\n  ELEMENT,\n  CONNECTION,\n}\n\ntype Props = {\n  gameId: GameId;\n};\n\nexport function Emulator({ gameId }: Props) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const canvasWrapperRef = useRef<HTMLDivElement>(null);\n  const forceUpdate = useForceUpdate();\n  const [cursor, setCursor] = useState<Cursor>();\n  const [options, setOptions] = useState<Options>({\n    isInputVector: false,\n    isOutputVector: false,\n  });\n  const densityFactor = useRefState({ factor: window.devicePixelRatio ?? 1 });\n\n  const size = useRefState({ width: 0, height: 0 });\n  const pos = useRefState({ x: 0, y: 0 });\n  const assets = useRefState<{\n    x1: AssetSet;\n    x2: AssetSet;\n  }>({\n    x1: { images: {}, status: LoadingStatus.NONE },\n    x2: { images: {}, status: LoadingStatus.NONE },\n  });\n  const mousePos = useRefState({ x: 0, y: 0 });\n  const hoverElement = useRefState<{\n    target:\n      | {\n          type: NodeType.ELEMENT;\n          elId: ElementId;\n          activePin: { index: number } | undefined;\n        }\n      | {\n          type: NodeType.CONNECTION;\n          connectionIndex: number;\n        }\n      | undefined;\n  }>({\n    target: undefined,\n  });\n  const focusElement = useRefState<{\n    target:\n      | {\n          type: NodeType.ELEMENT;\n          elId: ElementId;\n        }\n      | {\n          type: NodeType.CONNECTION;\n          connectionIndex: number;\n        }\n      | undefined;\n  }>({ target: undefined });\n  const movingElement = useRefState<{\n    target: { elId: ElementId } | undefined;\n  }>({\n    target: undefined,\n  });\n  const wireElement = useRefState<{\n    source: { elId: ElementId; pinIndex: number } | undefined;\n  }>({\n    source: undefined,\n  });\n  const state = useRefState<GameState>({\n    elements: [],\n    connections: [],\n  });\n  const mouseState = useRefState({ isMouseDown: false });\n  const panState = useRefState({ isPan: false });\n\n  function convertScreenCoordsToAppCoords({ x, y }: Coords): Coords {\n    return {\n      x: x - size.width / 2 - pos.x,\n      y: y - size.height / 2 - pos.y,\n    };\n  }\n\n  let draw: () => void;\n\n  function clearState() {\n    pos.x = 0;\n    pos.y = 0;\n    state.elements = [];\n    state.connections = [];\n    hoverElement.target = undefined;\n    focusElement.target = undefined;\n    movingElement.target = undefined;\n    wireElement.source = undefined;\n    panState.isPan = false;\n    mouseState.isMouseDown = false;\n  }\n\n  const loadGameState = useHandler(() => {\n    const json = localStorage.getItem(`sch_game_${gameId}`);\n\n    if (!json) {\n      return;\n    }\n\n    const {\n      pos: savedPos,\n      elements,\n      connections,\n      options: savedOptions,\n    } = JSON.parse(json);\n\n    clearState();\n\n    pos.x = savedPos.x;\n    pos.y = savedPos.y;\n    state.elements = elements;\n    state.connections = connections;\n\n    setOptions(savedOptions);\n\n    window.setTimeout(draw, 0);\n  });\n\n  useEffect(() => {\n    loadGameState();\n\n    const intervalId = window.setInterval(forceUpdate, 500);\n\n    return () => {\n      window.clearInterval(intervalId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (process.env.NODE_ENV === 'development') {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (window as any).state = state;\n  }\n\n  const getElById = useHandler((id: ElementId): Element => {\n    const el = state.elements.find((el) => el.id === id);\n\n    if (!el) {\n      throw new Error('Element not found');\n    }\n\n    return el;\n  });\n\n  draw = useHandler(() => {\n    if (size.width === 0) {\n      return;\n    }\n\n    const ctx = getCanvasContext(canvasRef.current);\n\n    actualizeDensityFactor();\n    const { factor } = densityFactor;\n\n    const hoverTarget = hoverElement.target;\n\n    ctx.save();\n    ctx.clearRect(0, 0, size.width * factor, size.height * factor);\n\n    if (factor !== 1) {\n      ctx.scale(factor, factor);\n    }\n\n    ctx.translate(\n      Math.floor(size.width / 2) + pos.x,\n      Math.floor(size.height / 2) + pos.y,\n    );\n\n    ctx.save();\n\n    ctx.lineWidth = 1;\n    ctx.textBaseline = 'middle';\n    ctx.textAlign = 'center';\n    ctx.font = '15px sans-serif';\n    ctx.fillStyle = '#333';\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(100, 0);\n    ctx.moveTo(95, -5);\n    ctx.lineTo(100, 0);\n    ctx.moveTo(95, 5);\n    ctx.lineTo(100, 0);\n    ctx.strokeStyle = '#0f0';\n    ctx.stroke();\n    ctx.fillText('X', 90, 15);\n\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(0, 100);\n    ctx.moveTo(-5, 95);\n    ctx.lineTo(0, 100);\n    ctx.moveTo(5, 95);\n    ctx.lineTo(0, 100);\n    ctx.strokeStyle = '#00f';\n    ctx.stroke();\n    ctx.fillText('Y', 12, 90);\n\n    ctx.restore();\n\n    for (const element of state.elements) {\n      const { pos } = element;\n\n      if (\n        hoverTarget &&\n        hoverTarget.type === NodeType.ELEMENT &&\n        element.id === hoverTarget.elId\n      ) {\n        ctx.save();\n        ctx.strokeStyle = '#ddf';\n        ctx.lineWidth = 3;\n        ctx.strokeRect(\n          pos.x - FOCUS_SIZE / 2,\n          pos.y - FOCUS_SIZE / 2,\n          FOCUS_SIZE,\n          FOCUS_SIZE,\n        );\n        ctx.restore();\n      } else if (\n        focusElement.target &&\n        focusElement.target.type === NodeType.ELEMENT &&\n        focusElement.target.elId === element.id\n      ) {\n        ctx.save();\n        ctx.strokeStyle = '#ededf3';\n        ctx.lineWidth = 2;\n        ctx.strokeRect(\n          pos.x - FOCUS_SIZE / 2,\n          pos.y - FOCUS_SIZE / 2,\n          FOCUS_SIZE,\n          FOCUS_SIZE,\n        );\n        ctx.restore();\n      }\n    }\n\n    let index = 0;\n    for (const [p1, p2] of state.connections) {\n      const el1 = getElById(p1.elId);\n      const el2 = getElById(p2.elId);\n\n      const pin1 = elementsDescriptions[el1.type].pins[p1.pinIndex];\n      const pin2 = elementsDescriptions[el2.type].pins[p2.pinIndex];\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(\n        el1.pos.x - ICON_SIZE / 2 + pin1.pos.x * ICON_SIZE,\n        el1.pos.y - ICON_SIZE / 2 + pin1.pos.y * ICON_SIZE,\n      );\n      ctx.lineTo(\n        el2.pos.x - ICON_SIZE / 2 + pin2.pos.x * ICON_SIZE,\n        el2.pos.y - ICON_SIZE / 2 + pin2.pos.y * ICON_SIZE,\n      );\n\n      const isHovered =\n        hoverTarget &&\n        hoverTarget.type === NodeType.CONNECTION &&\n        hoverTarget.connectionIndex === index;\n\n      const isInFocus =\n        focusElement.target &&\n        focusElement.target.type === NodeType.CONNECTION &&\n        focusElement.target.connectionIndex === index;\n\n      ctx.lineWidth = isHovered || isInFocus ? 3 : 1;\n      ctx.strokeStyle = isInFocus ? '#00f' : '#333';\n\n      ctx.stroke();\n      ctx.restore();\n\n      index += 1;\n    }\n\n    if (wireElement.source) {\n      const { elId, pinIndex } = wireElement.source;\n      const el = getElById(elId);\n\n      const { pos } = elementsDescriptions[el.type].pins[pinIndex];\n\n      const x0 = pos.x * ICON_SIZE + el.pos.x - ICON_SIZE / 2;\n      const y0 = pos.y * ICON_SIZE + el.pos.y - ICON_SIZE / 2;\n\n      const { x, y } = convertScreenCoordsToAppCoords(mousePos);\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x, y);\n      ctx.strokeStyle = '#888';\n      ctx.stroke();\n      ctx.restore();\n    }\n\n    for (const element of state.elements) {\n      const { type, pos } = element;\n\n      if (type === ElementType.INPUT || type === ElementType.OUTPUT) {\n        const char = getLiteralForSignal(\n          state.elements.filter((el) => el.type === type),\n          element,\n          type === ElementType.INPUT\n            ? options.isInputVector\n            : options.isOutputVector,\n        );\n\n        ctx.save();\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.font = '24px sans-serif';\n        if (type === ElementType.INPUT) {\n          ctx.fillText(char, pos.x, pos.y - 10);\n        } else {\n          ctx.fillText(char, pos.x + 6, pos.y);\n        }\n        ctx.restore();\n      } else {\n        const [main, fallback]: ['x1', 'x2'] | ['x2', 'x1'] =\n          factor > 1.5 ? ['x2', 'x1'] : ['x1', 'x2'];\n\n        const img = assets[main].images[type] ?? assets[fallback].images[type];\n\n        if (img) {\n          const x0 = pos.x - ICON_SIZE / 2;\n          const y0 = pos.y - ICON_SIZE / 2;\n\n          ctx.drawImage(img, x0, y0, ICON_SIZE, ICON_SIZE);\n        }\n      }\n\n      const { pins } = elementsDescriptions[type];\n      let i = 0;\n\n      for (const pin of pins) {\n        const isHovered =\n          hoverTarget &&\n          hoverTarget.type === NodeType.ELEMENT &&\n          hoverTarget.elId === element.id &&\n          hoverTarget.activePin &&\n          hoverTarget.activePin.index === i;\n\n        const isWire =\n          wireElement.source &&\n          wireElement.source.elId === element.id &&\n          wireElement.source.pinIndex === i;\n\n        ctx.beginPath();\n        ctx.arc(\n          pos.x + (pin.pos.x - 0.5) * ICON_SIZE,\n          pos.y + (pin.pos.y - 0.5) * ICON_SIZE,\n          isHovered ? PIN_DOT_RADIUS + 1 : PIN_DOT_RADIUS,\n          0,\n          Math.PI * 2,\n        );\n        ctx.closePath();\n\n        if (isHovered || isWire) {\n          ctx.save();\n          ctx.fillStyle = isWire ? '#d66' : '#66d';\n          ctx.fill();\n          ctx.restore();\n        } else {\n          ctx.save();\n          ctx.fillStyle = '#fff';\n          ctx.fill();\n          ctx.strokeStyle = '#448';\n          ctx.lineWidth = 2;\n          ctx.stroke();\n          ctx.restore();\n        }\n        i += 1;\n      }\n    }\n\n    ctx.restore();\n\n    let currentCursor: Cursor;\n\n    if (wireElement.source) {\n      currentCursor = 'pointer';\n    } else if (hoverTarget)\n      if (hoverTarget.type === NodeType.CONNECTION) {\n        currentCursor = 'move';\n      } else if (hoverTarget.type === NodeType.ELEMENT) {\n        if (hoverTarget.activePin) {\n          currentCursor = 'pointer';\n        } else {\n          currentCursor = 'move';\n        }\n      } else if (panState.isPan) {\n        currentCursor = 'grabbing';\n      }\n\n    if (currentCursor !== cursor) {\n      setCursor(currentCursor);\n    }\n  });\n\n  function getConnectionPinPosition({\n    elId,\n    pinIndex,\n  }: {\n    elId: ElementId;\n    pinIndex: number;\n  }): Coords {\n    const el = getElById(elId);\n\n    const pin = elementsDescriptions[el.type].pins[pinIndex];\n\n    return {\n      x: el.pos.x + (pin.pos.x - 0.5) * ICON_SIZE,\n      y: el.pos.y + (pin.pos.y - 0.5) * ICON_SIZE,\n    };\n  }\n\n  function checkHover(): boolean {\n    const { x, y } = convertScreenCoordsToAppCoords(mousePos);\n    const hoverTarget = hoverElement.target;\n\n    let flag = false;\n    let hoverFound = false;\n    let hoverConnectionFound = false;\n\n    for (const element of state.elements) {\n      const { pins } = elementsDescriptions[element.type];\n\n      const x0 = element.pos.x - ICON_SIZE / 2;\n      const y0 = element.pos.y - ICON_SIZE / 2;\n\n      for (const pin of pins) {\n        if (\n          (x0 + pin.pos.x * ICON_SIZE - x) ** 2 +\n            (y0 + pin.pos.y * ICON_SIZE - y) ** 2 <\n          (PIN_DOT_RADIUS + 4) ** 2\n        ) {\n          const pinIndex = pins.indexOf(pin);\n\n          // before set check if already hovered\n          if (\n            !hoverTarget ||\n            hoverTarget.type !== NodeType.ELEMENT ||\n            hoverTarget.elId !== element.id ||\n            hoverTarget.activePin?.index !== pinIndex\n          ) {\n            hoverElement.target = {\n              type: NodeType.ELEMENT,\n              elId: element.id,\n              activePin: {\n                index: pinIndex,\n              },\n            };\n            flag = true;\n          }\n          hoverFound = true;\n          break;\n        }\n      }\n    }\n\n    if (!hoverFound) {\n      for (const element of state.elements) {\n        const x0 = element.pos.x - ICON_SIZE / 2;\n        const y0 = element.pos.y - ICON_SIZE / 2;\n\n        if (x > x0 && x < x0 + ICON_SIZE && y > y0 && y < y0 + ICON_SIZE) {\n          // before set check if already hovered\n          if (\n            !hoverTarget ||\n            hoverTarget.type !== NodeType.ELEMENT ||\n            hoverTarget.elId !== element.id ||\n            hoverTarget.activePin\n          ) {\n            hoverElement.target = {\n              type: NodeType.ELEMENT,\n              elId: element.id,\n              activePin: undefined,\n            };\n            flag = true;\n          }\n          hoverFound = true;\n          break;\n        }\n      }\n    }\n\n    if (!hoverFound) {\n      for (const connection of state.connections) {\n        const [p1, p2] = connection;\n\n        const point1 = getConnectionPinPosition(p1);\n        const point2 = getConnectionPinPosition(p2);\n\n        const shiftedPoint2 = subtract(point2, point1);\n        const shiftedMouse = subtract({ x, y }, point1);\n\n        const a = Math.atan2(shiftedPoint2.y, shiftedPoint2.x);\n\n        const rotatedPoint2 = rotate(shiftedPoint2, -a);\n        const rotatedMouse = rotate(shiftedMouse, -a);\n\n        const GAP = 10;\n\n        if (\n          rotatedMouse.x >= -GAP &&\n          rotatedMouse.x <= rotatedPoint2.x + GAP &&\n          rotatedMouse.y > -GAP &&\n          rotatedMouse.y < GAP\n        ) {\n          const connectionIndex = state.connections.indexOf(connection);\n\n          // before set check if already hovered\n          if (\n            !hoverTarget ||\n            hoverTarget.type !== NodeType.CONNECTION ||\n            hoverTarget.connectionIndex !== connectionIndex\n          ) {\n            hoverElement.target = {\n              type: NodeType.CONNECTION,\n              connectionIndex,\n            };\n            flag = true;\n          }\n          hoverConnectionFound = true;\n          break;\n        }\n      }\n    }\n\n    if (!hoverFound && !hoverConnectionFound) {\n      if (hoverElement.target) {\n        hoverElement.target = undefined;\n        flag = true;\n      }\n    }\n\n    return flag;\n  }\n\n  function actualizeDensityFactor() {\n    const factor = window.devicePixelRatio ?? 1;\n\n    if (densityFactor.factor !== factor) {\n      densityFactor.factor = factor;\n      forceUpdate();\n    }\n  }\n\n  function updateSize() {\n    const app = canvasWrapperRef.current;\n    const canvas = canvasRef.current;\n\n    if (!app || !canvas) {\n      throw new Error();\n    }\n\n    if (size.width !== app.clientWidth || size.height !== app.clientHeight) {\n      size.width = app.clientWidth;\n      size.height = app.clientHeight;\n\n      canvas.width = size.width * densityFactor.factor;\n      canvas.height = size.height * densityFactor.factor;\n\n      draw();\n    }\n  }\n\n  function checkOverlap(point: Coords): boolean {\n    for (const { pos } of state.elements) {\n      if (\n        (pos.x - point.x) ** 2 + (pos.y - point.y) ** 2 <\n        (ICON_SIZE / 2) ** 2\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function addElement(type: ElementType) {\n    const pos = convertScreenCoordsToAppCoords({\n      x: size.width / 2,\n      y: size.height / 2,\n    });\n\n    while (checkOverlap(pos)) {\n      pos.x += ICON_SIZE + 20;\n    }\n\n    state.elements.push({\n      type,\n      id: getNextId(state),\n      pos,\n    });\n    draw();\n  }\n\n  function loadAssets() {\n    const is2x = densityFactor.factor > 1.5;\n\n    const assetsSet = assets[is2x ? 'x1' : 'x2'];\n\n    if (assetsSet.status !== LoadingStatus.NONE) {\n      return;\n    }\n\n    const loadImages = [\n      ElementType.PNP,\n      ElementType.NPN,\n      ElementType.POWER,\n      ElementType.GROUND,\n    ];\n\n    let remainLoad = loadImages.length;\n\n    function onLoad() {\n      remainLoad -= 1;\n\n      if (remainLoad === 0) {\n        assetsSet.status = LoadingStatus.DONE;\n        draw();\n      }\n    }\n\n    assetsSet.status = LoadingStatus.LOADING;\n\n    for (const imgName of loadImages) {\n      const image = new Image();\n      image.src = `assets/${imgName}${is2x ? '@2x' : ''}.png`;\n      image.addEventListener('load', () => {\n        assetsSet.images[imgName] = image;\n        onLoad();\n      });\n      image.addEventListener('error', onLoad);\n    }\n  }\n\n  useEffect(() => {\n    updateSize();\n    loadAssets();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useOnChange(loadAssets, [densityFactor.factor]);\n\n  useWindowEvent('resize', () => {\n    setTimeout(() => {\n      actualizeDensityFactor();\n      updateSize();\n    }, 0);\n  });\n\n  useOnChange(draw, [options]);\n\n  function resetCursorState() {\n    let needRepaint = false;\n\n    if (mouseState.isMouseDown) {\n      mouseState.isMouseDown = false;\n    }\n\n    if (movingElement.target) {\n      movingElement.target = undefined;\n      needRepaint = true;\n    }\n\n    if (panState.isPan) {\n      panState.isPan = false;\n      needRepaint = true;\n    }\n\n    if (wireElement.source) {\n      wireElement.source = undefined;\n      needRepaint = true;\n    }\n\n    return needRepaint;\n  }\n\n  function startWiring({\n    elId,\n    pinIndex,\n  }: {\n    elId: ElementId;\n    pinIndex: number;\n  }) {\n    focusElement.target = { type: NodeType.ELEMENT, elId };\n    wireElement.source = {\n      elId,\n      pinIndex,\n    };\n  }\n\n  const onMouseUp = useHandler((e?: MouseEvent) => {\n    if (e) {\n      e.preventDefault();\n\n      if (e.button !== 0) {\n        return;\n      }\n    }\n\n    let needRepaint = false;\n\n    mouseState.isMouseDown = false;\n\n    // TODO: Why focus resetting here?\n    if (\n      focusElement.target &&\n      focusElement.target.type === NodeType.ELEMENT &&\n      !wireElement.source &&\n      !movingElement.target\n    ) {\n      focusElement.target = undefined;\n      needRepaint = true;\n    }\n\n    if (movingElement.target) {\n      movingElement.target = undefined;\n      needRepaint = true;\n    }\n\n    if (panState.isPan) {\n      panState.isPan = false;\n      needRepaint = true;\n    }\n\n    if (wireElement.source) {\n      const hoverTarget = hoverElement.target;\n\n      if (\n        hoverTarget &&\n        hoverTarget.type === NodeType.ELEMENT &&\n        hoverTarget.activePin &&\n        wireElement.source.elId !== hoverTarget.elId\n      ) {\n        state.connections.push([\n          {\n            elId: hoverTarget.elId,\n            pinIndex: hoverTarget.activePin.index,\n          },\n          {\n            elId: wireElement.source.elId,\n            pinIndex: wireElement.source.pinIndex,\n          },\n        ]);\n      }\n\n      wireElement.source = undefined;\n      needRepaint = true;\n    } else if (!wireElement.source) {\n      const hoverTarget = hoverElement.target;\n\n      if (\n        hoverTarget &&\n        hoverTarget.type === NodeType.ELEMENT &&\n        hoverTarget.activePin\n      ) {\n        startWiring({\n          elId: hoverTarget.elId,\n          pinIndex: hoverTarget.activePin.index,\n        });\n        needRepaint = true;\n      }\n\n      if (hoverTarget) {\n        if (hoverTarget.type === NodeType.ELEMENT && !hoverTarget.activePin) {\n          if (\n            !focusElement.target ||\n            focusElement.target.type !== NodeType.ELEMENT ||\n            focusElement.target.elId !== hoverTarget.elId\n          ) {\n            focusElement.target = {\n              type: NodeType.ELEMENT,\n              elId: hoverTarget.elId,\n            };\n            needRepaint = true;\n          }\n        } else if (hoverTarget.type === NodeType.CONNECTION) {\n          if (\n            !focusElement.target ||\n            focusElement.target.type !== NodeType.CONNECTION ||\n            focusElement.target.connectionIndex !== hoverTarget.connectionIndex\n          ) {\n            focusElement.target = {\n              type: NodeType.CONNECTION,\n              connectionIndex: hoverTarget.connectionIndex,\n            };\n            needRepaint = true;\n          }\n        }\n      }\n    }\n\n    if (needRepaint) {\n      draw();\n    }\n  });\n\n  return (\n    <main className={styles.app}>\n      <div ref={canvasWrapperRef} className={styles.canvasWrapper}>\n        <canvas\n          ref={canvasRef}\n          className={cn(styles.canvas, {\n            [styles.canvasScale]: densityFactor.factor !== 1,\n          })}\n          width={0}\n          height={0}\n          style={\n            {\n              '--factor': 1 / densityFactor.factor,\n              cursor,\n            } as CSSProperties\n          }\n          onClick={(e) => {\n            e.preventDefault();\n          }}\n          onMouseDown={(e) => {\n            e.preventDefault();\n\n            if (e.button !== 0) {\n              return;\n            }\n\n            if (mouseState.isMouseDown) {\n              onMouseUp();\n            }\n\n            mouseState.isMouseDown = true;\n          }}\n          onMouseMove={(e) => {\n            mousePos.x = e.clientX;\n            mousePos.y = e.clientY;\n\n            let needRepaint = false;\n\n            if (checkHover()) {\n              needRepaint = true;\n            }\n\n            const isMoving = Boolean(movingElement.target);\n            const hoverTarget = hoverElement.target;\n\n            if (mouseState.isMouseDown) {\n              if (\n                !isMoving &&\n                !wireElement.source &&\n                hoverTarget &&\n                hoverTarget.type === NodeType.ELEMENT &&\n                hoverTarget.activePin\n              ) {\n                startWiring({\n                  elId: hoverTarget.elId,\n                  pinIndex: hoverTarget.activePin.index,\n                });\n                needRepaint = true;\n              }\n\n              if (!isMoving && wireElement.source) {\n                needRepaint = true;\n              }\n\n              if (\n                !isMoving &&\n                !wireElement.source &&\n                hoverTarget &&\n                hoverTarget.type === NodeType.ELEMENT\n              ) {\n                movingElement.target = {\n                  elId: hoverTarget.elId,\n                };\n                focusElement.target = {\n                  type: NodeType.ELEMENT,\n                  elId: hoverTarget.elId,\n                };\n                needRepaint = true;\n              }\n\n              if (\n                !wireElement.source &&\n                !movingElement.target &&\n                !panState.isPan\n              ) {\n                panState.isPan = true;\n                needRepaint = true;\n              }\n\n              if (movingElement.target) {\n                const el = getElById(movingElement.target.elId);\n                el.pos.x += e.movementX;\n                el.pos.y += e.movementY;\n              } else if (!wireElement.source) {\n                pos.x += e.movementX;\n                pos.y += e.movementY;\n              }\n\n              needRepaint = true;\n            } else {\n              if (panState.isPan) {\n                panState.isPan = false;\n                needRepaint = true;\n              }\n            }\n\n            if (wireElement.source) {\n              needRepaint = true;\n            }\n\n            if (needRepaint) {\n              draw();\n            }\n          }}\n          onMouseUp={onMouseUp}\n          onMouseLeave={() => {\n            if (resetCursorState()) {\n              draw();\n            }\n          }}\n          onContextMenu={(e) => {\n            if (hoverElement.target || wireElement.source || panState.isPan) {\n              e.preventDefault();\n            }\n          }}\n        />\n      </div>\n      <div className={styles.panel}>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            addElement(ElementType.POWER);\n          }}\n        >\n          DD\n        </button>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            addElement(ElementType.GROUND);\n          }}\n        >\n          GND\n        </button>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            addElement(ElementType.NPN);\n          }}\n        >\n          npn\n        </button>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            addElement(ElementType.PNP);\n          }}\n        >\n          pnp\n        </button>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            addElement(ElementType.INPUT);\n          }}\n        >\n          input\n        </button>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            addElement(ElementType.OUTPUT);\n          }}\n        >\n          output\n        </button>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            addElement(ElementType.DOT);\n          }}\n        >\n          dot\n        </button>\n        <span className={styles.divider} />\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            loadGameState();\n          }}\n        >\n          Load\n        </button>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            localStorage.setItem(\n              `sch_game_${gameId}`,\n              JSON.stringify({\n                pos,\n                elements: state.elements,\n                connections: state.connections,\n                options,\n              }),\n            );\n            // eslint-disable-next-line no-console\n            console.info('Saved');\n          }}\n        >\n          Save\n        </button>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={(e) => {\n            e.preventDefault();\n            clearState();\n            draw();\n          }}\n        >\n          Clear\n        </button>\n        {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n        <a href=\"#\">\n          <button type=\"button\" className={styles.button}>\n            Exit\n          </button>\n        </a>\n      </div>\n      <div className={styles.info}>\n        <TruthTable\n          elements={state.elements}\n          options={options}\n          onOptionsChange={(update) =>\n            setOptions({\n              ...options,\n              ...update,\n            })\n          }\n        />\n        <SchemaErrors state={state} />\n        <span className={styles.space} />\n        <div className={styles.debugPanel}>\n          <div>elements: {state.elements.length}</div>\n          <div>connections: {state.connections.length}</div>\n          <div>el moving: {yesNo(movingElement.target)}</div>\n          <div>\n            el in focus:{' '}\n            {yesNo(\n              focusElement.target &&\n                focusElement.target.type === NodeType.ELEMENT,\n            )}\n          </div>\n          <div>\n            conn in focus:{' '}\n            {yesNo(\n              focusElement.target &&\n                focusElement.target.type === NodeType.CONNECTION,\n            )}\n          </div>\n          <div>\n            el hover:{' '}\n            {yesNo(\n              hoverElement.target &&\n                hoverElement.target.type === NodeType.ELEMENT,\n            )}\n          </div>\n          <div>\n            pin hover:{' '}\n            {yesNo(\n              hoverElement.target &&\n                hoverElement.target.type === NodeType.ELEMENT &&\n                hoverElement.target.activePin,\n            )}\n          </div>\n          <div>\n            conn hover:{' '}\n            {yesNo(\n              hoverElement.target &&\n                hoverElement.target.type === NodeType.CONNECTION,\n            )}\n          </div>\n          <div>wiring: {yesNo(wireElement.source)}</div>\n          <div>drag: {yesNo(panState.isPan)}</div>\n          <div>mouse down: {yesNo(mouseState.isMouseDown)}</div>\n        </div>\n      </div>\n    </main>\n  );\n}\n","import { useCallback, useRef, useState } from 'react';\n\nexport function useForceUpdate() {\n  const incRef = useRef(0);\n  const [, setInc] = useState(incRef.current);\n\n  return useCallback(() => {\n    incRef.current += 1;\n    setInc(incRef.current);\n  }, []);\n}\n","export function getCanvasContext(\n  canvas: HTMLCanvasElement | null | undefined,\n): CanvasRenderingContext2D {\n  if (!canvas) {\n    throw new Error();\n  }\n\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error();\n  }\n\n  return ctx;\n}\n","import { useMemo, useState } from 'react';\n\nimport { GameId } from 'common/types';\nimport { useOnChange } from 'hooks/useOnChange';\nimport { useWindowEvent } from 'hooks/useWindowEvent';\nimport { Emulator } from 'components/Emulator';\n\nimport styles from './App.module.scss';\n\nfunction getCurrentGameId(allowedIds: GameId[]): GameId | undefined {\n  const hash = (window.location.hash ?? '').trim().replace(/^#/, '');\n\n  if (hash) {\n    const match = hash.match(/^g(\\d+)$/);\n\n    if (match) {\n      const id = match[0] as GameId;\n\n      if (allowedIds.includes(id)) {\n        return id;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getNextGameId(currentGames: GameId[]): GameId {\n  const lastId = currentGames[currentGames.length - 1];\n\n  if (!lastId) {\n    return `g1`;\n  }\n\n  const match = lastId.match(/^g(\\d+)$/);\n\n  if (!match) {\n    throw new Error();\n  }\n\n  return `g${parseInt(match[1], 10) + 1}`;\n}\n\nexport function App() {\n  const savedGames = useMemo<GameId[]>(() => {\n    const json = localStorage.getItem('sch_games');\n    if (!json) {\n      return [];\n    }\n    return JSON.parse(json);\n  }, []);\n  const [currentGames, setCurrentGames] = useState(savedGames);\n\n  useOnChange(() => {\n    localStorage.setItem('sch_games', JSON.stringify(currentGames));\n  }, [currentGames]);\n\n  const [currentGameId, setCurrentGameId] = useState(\n    getCurrentGameId(currentGames),\n  );\n\n  useWindowEvent('hashchange', () => {\n    const gameId = getCurrentGameId(currentGames);\n\n    if (gameId !== currentGameId) {\n      setCurrentGameId(gameId);\n    }\n  });\n\n  if (currentGameId) {\n    return <Emulator key={currentGameId} gameId={currentGameId} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <h1 className={styles.title}>Schematic</h1>\n      <h2 className={styles.gamesTitle}>Current schemas:</h2>\n      <ul>\n        {currentGames.length ? (\n          currentGames.map((gameId) => (\n            <li key={gameId}>\n              <a href={`#${gameId}`}>{gameId}</a>{' '}\n              <button\n                type=\"button\"\n                className={styles.removeButton}\n                onClick={(e) => {\n                  e.preventDefault();\n\n                  // eslint-disable-next-line no-alert\n                  if (window.confirm('Are you sure?')) {\n                    setCurrentGames(currentGames.filter((id) => id !== gameId));\n                    localStorage.removeItem(`sch_game_${gameId}`);\n                  }\n                }}\n              >\n                x\n              </button>\n            </li>\n          ))\n        ) : (\n          <div>no saved schemas</div>\n        )}\n      </ul>\n      <button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          const newGameId = getNextGameId(currentGames);\n          setCurrentGames([...currentGames, newGameId]);\n\n          window.setTimeout(() => {\n            window.location.assign(`#${newGameId}`);\n          }, 0);\n        }}\n      >\n        New schema\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TruthTable_wrapper__23wrn\",\"options\":\"TruthTable_options__kzZt2\",\"option\":\"TruthTable_option__1Hqnt\"};"],"sourceRoot":""}