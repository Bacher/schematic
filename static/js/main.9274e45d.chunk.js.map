{"version":3,"sources":["utils/game.ts","hooks/useLatest.ts","hooks/useHandler.ts","hooks/useWindowEvent.ts","common/types.ts","stitches.ts","common/data.ts","utils/simulation.ts","utils/trigano.ts","hooks/useForceUpdate.ts","models/GameModel.ts","components/MainMenu/MainMenu.tsx","utils/array.ts","hooks/useRefState.ts","utils/canvas.ts","common/common.ts","utils/render.ts","hooks/usePageActive.ts","hooks/useDocumentEvent.ts","hooks/useActivePageInterval.ts","components/SchemaErrors/SchemaErrors.tsx","components/InputSignalsControl/InputSignalsControl.tsx","components/Toolbar/Toolbar.tsx","components/OptionsPanel/Option.tsx","components/OptionsPanel/OptionsPanel.tsx","components/DebugPanel/DebugPanel.tsx","components/Simulator/elements.tsx","components/Simulator/Simulator.tsx","hooks/useAssets.ts","components/App/App.tsx","hooks/useOnChange.ts","index.tsx"],"names":["parseGameId","gameId","match","gameNumber","parseInt","getNextGameId","currentGames","lastGame","last","game","id","Error","useLatest","some","ref","useRef","current","useHandler","callback","callbackRef","useCallback","useWindowEvent","eventName","func","useEffect","window","addEventListener","removeEventListener","ElementType","ObjectType","LoadingStatus","createStitches","theme","colors","gray400","gray500","media","bp1","bp2","utils","fontVariant","value","split","size","lineHeight","fontSize","styled","css","globalCss","keyframes","getCssText","createTheme","config","NodePowerState","ICON_SIZE","PREVIEW_WIDTH","PREVIEW_HEIGHT","elementsDescriptions","PNP","pins","pos","x","y","NPN","POWER","GROUND","INPUT","OUTPUT","DOT","defaultOptions","autoSaves","isInputVector","isOutputVector","simulate","debugDrawId","debugDrawAxis","debugShowFps","subtract","p1","p2","rotate","point","a","sinA","Math","sin","cosA","cos","getPinId","p","elId","pinIndex","useForceUpdate","incRef","useState","setInc","dropIndex","items","filter","index","getGameIdStorageKey","getGameIdPreviewStorageKey","watch","target","propertyKey","descriptor","originalMethod","this","GameModel","iAmWatcher","underWatch","before","getState","args","results","apply","needTriggerUpdate","after","triggerUpdate","draw","elements","connections","inputSignals","options","drawHandler","destroying","hoverElement","focusElement","wireElement","movingElement","mousePos","mouseState","panState","lastStateSnapshot","getPreview","stateListeners","saveGameThrottled","throttle","saveGame","leading","trailing","gameModel","undefined","isMouseDown","isPan","flush","clearState","handler","localStorage","setItem","JSON","stringify","preview","error","console","cmpState","shallowequal","state","cursor","getCursor","nodesSimulation","getSimulation","focusTarget","type","ELEMENT","element","find","inputIndex","indexOf","without","CONNECTION","connectionIndex","onMouseUp","position","movement","dX","dY","checkHover","isMoving","Boolean","PIN","startWiring","updateElement","el","im","wire","pullPos","checkOverlap","getNextId","isActual","listener","forceUpdate","selector","lastSelectedValue","selectedValue","actualSelectedValue","getLoadedState","checkPinHover","checkElementHover","checkConnectionHover","x0","y0","pin","PIN_DOT_RADIUS","connection","point1","getConnectionPinPosition","shiftedPoint2","shiftedMouse","atan2","rotatedPoint2","rotatedMouse","getElById","lastElement","isShortCircuit","getElement","pinId","inputElements","pinIdToNodes","Map","nodes","Set","pinId1","pinId2","node1","get","node2","mergedNode","delete","add","set","push","node","nodesList","values","map","IMPEDANCE","pinIdToNode","hasChanges","setZoneState","SHORT_CIRCUIT","iterationNumber","pin1Zone","pin2Zone","pin3Zone","buildNodesState","getNodesSimulationState","json","getItem","parse","savedOptions","optionsNames","Object","keys","defaults","pick","removeItem","toGameId","useGameState","already","selectorHandler","gameState","NO_PREVIEW","_Wrapper","display","flexDirection","alignItems","height","padding","boxSizing","flexShrink","_Title","margin","_GameTitle","marginBottom","_List","paddingRight","overflow","overflowY","_ListItem","_PreviewLink","textDecoration","previewStyles","width","marginRight","border","_PreviewBox","_PreviewImage","_NoPreview","justifyContent","textAlign","color","_GameLinkWrapper","minWidth","_GameLink","_Button","marginLeft","_NewGameButton","MainMenu","setCurrentGames","previewsRef","isDestroying","previewData","fetch","then","res","blob","imageUrl","URL","createObjectURL","revokeObjectURL","length","title","imageState","src","href","onClick","e","preventDefault","prompt","trim","item","i","clonedGame","cloneGame","array","slice","insert","confirm","removeGame","newGameId","setTimeout","location","assign","useRefState","getCanvasContext","canvas","ctx","getContext","getLiteralForSignalByIndex","elementsCount","isInput","charVariants","isVector","charAt","render","densityFactor","assets","tick","simulationPins","save","clearRect","scale","translate","floor","lineWidth","textBaseline","font","fillStyle","beginPath","moveTo","lineTo","strokeStyle","stroke","fillText","restore","isHover","isFocus","strokeRect","FOCUS_SIZE","el1","el2","nodeState","pin1","pin2","isHovered","isInFocus","drawDash","animateDash","setLineDash","char","getLiteralForSignal","main","fallback","img","images","drawImage","isWire","arc","PI","closePath","fillColor","noBorder","includes","fill","usePageActive","isActive","setActive","document","useDocumentEvent","newIsActive","visibilityState","useActivePageInterval","ms","intervalId","setInterval","clearInterval","SchemaErrors","errors","used","line","left","bottom","_Inputs","gap","variants","reverse","true","_InputLabel","gridTemplateAreas","userSelect","gridArea","_HiddenInput","opacity","_Bg","background","_Symbol","InputSignalsControl","enabled","checked","onChange","signals","updateInputSignals","top","borderRadius","whiteSpace","appearance","_Divider","Toolbar","addElement","disabled","deleteElementInFocus","reloadFromSave","_Option","Option","_SimulateButton","active","OptionsPanel","update","updates","updateOptions","OptionControl","optionName","_Yes","_No","yesNo","DebugPanel","_App","flexGrow","_CanvasWrapper","_Canvas","enableScaling","transformOrigin","transform","_FpsCounter","right","pointerEvents","_Space","_Info","flexBasis","borderLeft","getCurrentDensityFactor","devicePixelRatio","Simulator","canvasRef","canvasWrapperRef","drawFps","setDrawFps","tickRef","useMemo","checkSavedGame","loadGame","createEmptyModel","setPreviewHandler","canvasWidth","canvasHeight","factor","previewWidth","previewHeight","previewCanvas","createElement","previewCtx","fillRect","cropWidth","cropHeight","sx","sy","toDataURL","warn","showFps","fps","x1","status","NONE","x2","is2x","assetsSet","loadImages","remainLoad","LOADING","imgName","image","Image","onLoad","DONE","useAssets","convertScreenCoordsToAppCoords","actualizeDensityFactor","interval","debounce","maxWait","updateSize","canvasWrapper","clientWidth","clientHeight","setDrawHandler","destroy","useLayoutEffect","style","button","onMouseDown","onMouseMove","clientX","clientY","movementX","movementY","onMouseLeave","resetCursorState","onContextMenu","allowOpenContextMenu","getCurrentGameId","hash","replace","App","savedGames","data","deps","initRef","useOnChange","currentGameId","setCurrentGameId","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9274e45d.chunk.js","sourcesContent":["import type { GameId } from 'common/types';\nimport { GameSaveDescriptor } from 'common/types';\nimport { last } from 'lodash-es';\n\nexport function parseGameId(\n  gameId: string,\n): { gameId: GameId; gameNumber: number } | undefined {\n  const match = gameId.match(/^[gs](\\d+)$/);\n\n  if (!match) {\n    return undefined;\n  }\n\n  return {\n    gameId: match[0] as GameId,\n    gameNumber: parseInt(match[1], 10),\n  };\n}\n\nexport function getNextGameId(currentGames: GameSaveDescriptor[]): GameId {\n  const lastGame = last(currentGames);\n\n  if (!lastGame) {\n    return `s1`;\n  }\n\n  const game = parseGameId(lastGame.id);\n\n  if (!game) {\n    throw new Error();\n  }\n\n  return `s${game.gameNumber + 1}`;\n}\n","import { useRef } from 'react';\n\nexport function useLatest<T>(some: T): { current: T } {\n  const ref = useRef(some);\n  ref.current = some;\n  return ref;\n}\n","import { useCallback } from 'react';\nimport { useLatest } from './useLatest';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useHandler<F extends (...args: any) => any>(callback: F): F {\n  const callbackRef = useLatest<F>(callback);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ((...args: any) => callbackRef.current(...args)) as any,\n    [],\n  );\n}\n","import { useEffect } from 'react';\n\nimport { useHandler } from 'hooks/useHandler';\n\nexport function useWindowEvent(\n  eventName: string,\n  callback: (...args: unknown[]) => void,\n) {\n  const func = useHandler(callback);\n\n  useEffect(() => {\n    window.addEventListener(eventName, func, false);\n\n    return () => {\n      window.removeEventListener(eventName, func, false);\n    };\n  }, [eventName, func]);\n}\n","export type GameId = `s${number}`;\n\nexport enum ElementType {\n  PNP = 'pnp',\n  NPN = 'npn',\n  POWER = 'power',\n  GROUND = 'ground',\n  INPUT = 'input',\n  OUTPUT = 'output',\n  DOT = 'dot',\n}\n\nexport type Coords = {\n  x: number;\n  y: number;\n};\n\nexport type Point = {\n  x: number;\n  y: number;\n};\n\nexport type BoxSize = {\n  width: number;\n  height: number;\n};\n\nexport type Cursor =\n  | 'initial'\n  | 'move'\n  | 'pointer'\n  | 'drag'\n  | 'grab'\n  | 'grabbing'\n  | 'cross';\n\nexport enum ObjectType {\n  ELEMENT,\n  CONNECTION,\n  PIN,\n}\n\nexport type ElementId = `el${number}`;\n\nexport type Element = {\n  type: ElementType;\n  id: ElementId;\n  pos: Coords;\n};\n\nexport type ConnectionPin = { elId: ElementId; pinIndex: number };\n\nexport type Connection = [ConnectionPin, ConnectionPin];\n\nexport type Pin = {\n  pos: Coords;\n};\n\nexport type ElementDescription = {\n  pins: Pin[];\n};\n\nexport type GameState = {\n  elements: Element[];\n  connections: Connection[];\n};\n\nexport type Options = {\n  autoSaves: boolean;\n  isInputVector: boolean;\n  isOutputVector: boolean;\n  simulate: boolean;\n  debugDrawId: boolean;\n  debugDrawAxis: boolean;\n  debugShowFps: boolean;\n};\n\nexport enum LoadingStatus {\n  NONE,\n  LOADING,\n  DONE,\n}\n\nexport type AssetSet = {\n  images: Record<string, HTMLImageElement>;\n  status: LoadingStatus;\n};\n\nexport type Assets = {\n  x1: AssetSet;\n  x2: AssetSet;\n};\n\nexport type GameSaveDescriptor = {\n  id: GameId;\n  title: string;\n};\n","import { createStitches } from '@stitches/react';\n\nexport const {\n  styled,\n  css,\n  globalCss,\n  keyframes,\n  getCssText,\n  theme,\n  createTheme,\n  config,\n} = createStitches({\n  theme: {\n    colors: {\n      gray400: 'gainsboro',\n      gray500: 'lightgray',\n    },\n  },\n  media: {\n    bp1: '(min-width: 480px)',\n    bp2: '(min-width: 768px)',\n  },\n  utils: {\n    fontVariant: (value: `${number}|${number}`) => {\n      const [size, lineHeight] = value.split('|');\n\n      return {\n        fontSize: `${size}px`,\n        lineHeight: `${lineHeight}px`,\n      };\n    },\n  },\n});\n","import { ElementType, ElementDescription, Options } from './types';\n\nexport const ICON_SIZE = 48;\nexport const FOCUS_SIZE = ICON_SIZE + 4;\nexport const PIN_DOT_RADIUS = 5;\nexport const MAX_FPS = 60;\nexport const AUTO_SAVE_INTERVAL = 2000;\nexport const ANIMATION_TICK = 500;\nexport const PREVIEW_WIDTH = 150;\nexport const PREVIEW_HEIGHT = 100;\nexport const PREVIEW_ZOOM = 2;\n\nexport const elementsDescriptions: Record<ElementType, ElementDescription> = {\n  [ElementType.PNP]: {\n    pins: [\n      { pos: { x: 0.47, y: 0.94 } },\n      { pos: { x: -0.07, y: 0.32 } },\n      { pos: { x: 1.05, y: 0.32 } },\n    ],\n  },\n  [ElementType.NPN]: {\n    pins: [\n      { pos: { x: 0.47, y: 1 } },\n      { pos: { x: -0.07, y: 0.33 } },\n      { pos: { x: 1.05, y: 0.32 } },\n    ],\n  },\n  [ElementType.POWER]: {\n    pins: [{ pos: { x: 0.52, y: 0.8 } }],\n  },\n  [ElementType.GROUND]: {\n    pins: [{ pos: { x: 0.46, y: 0.15 } }],\n  },\n  [ElementType.INPUT]: {\n    pins: [{ pos: { x: 0.5, y: 0.8 } }],\n  },\n  [ElementType.OUTPUT]: {\n    pins: [{ pos: { x: 0.2, y: 0.5 } }],\n  },\n  [ElementType.DOT]: {\n    pins: [{ pos: { x: 0.5, y: 0.5 } }],\n  },\n};\n\nexport const defaultOptions: Options = {\n  autoSaves: true,\n  isInputVector: false,\n  isOutputVector: false,\n  simulate: false,\n  debugDrawId: false,\n  debugDrawAxis: false,\n  debugShowFps: false,\n};\n","import {\n  Connection,\n  ConnectionPin,\n  Element,\n  ElementId,\n  ElementType,\n} from 'common/types';\n\nexport type PinId = `${ElementId}:${number}`;\n\ntype Node = PinId[];\n\nexport enum NodePowerState {\n  IMPEDANCE,\n  GROUND,\n  POWER,\n  SHORT_CIRCUIT,\n}\n\nexport type NodeState = {\n  state: NodePowerState;\n  pins: PinId[];\n};\n\nexport function getPinId(p: ConnectionPin): PinId {\n  return `${p.elId}:${p.pinIndex}`;\n}\n\nexport function getNodesSimulationState(\n  elements: Element[],\n  connections: Connection[],\n  inputSignals: boolean[],\n): NodeState[] {\n  let isShortCircuit = false;\n\n  function getElement(pinId: PinId): Element {\n    const elId = pinId.split(':')[0];\n\n    const element = elements.find(({ id }) => id === elId);\n\n    if (!element) {\n      throw new Error('No element');\n    }\n\n    return element;\n  }\n\n  function buildNodesState(nodes: NodeState[]) {\n    const pinIdToNode = new Map<PinId, NodeState | undefined>();\n\n    for (const node of nodes) {\n      for (const pin of node.pins) {\n        pinIdToNode.set(pin, node);\n      }\n    }\n\n    let hasChanges = true;\n\n    function setZoneState(node: NodeState, state: NodePowerState): void {\n      if (\n        state === NodePowerState.POWER &&\n        node.state === NodePowerState.GROUND\n      ) {\n        isShortCircuit = true;\n        node.state = NodePowerState.SHORT_CIRCUIT;\n        return;\n      }\n\n      if (\n        state === NodePowerState.GROUND &&\n        node.state === NodePowerState.POWER\n      ) {\n        isShortCircuit = true;\n        node.state = NodePowerState.SHORT_CIRCUIT;\n        return;\n      }\n\n      if (node.state !== state) {\n        node.state = state;\n        hasChanges = true;\n      }\n    }\n\n    let iterationNumber = 0;\n\n    while (hasChanges) {\n      hasChanges = false;\n      iterationNumber += 1;\n\n      if (iterationNumber > 100) {\n        throw new Error('Simulation in infinity loop');\n      }\n\n      for (const node of nodes) {\n        for (const pin of node.pins) {\n          const element = getElement(pin);\n\n          switch (element.type) {\n            case ElementType.INPUT: {\n              const inputIndex = inputElements.indexOf(element);\n              const value = inputSignals[inputIndex];\n              setZoneState(\n                node,\n                value ? NodePowerState.POWER : NodePowerState.GROUND,\n              );\n              break;\n            }\n            case ElementType.POWER:\n              setZoneState(node, NodePowerState.POWER);\n              break;\n            case ElementType.GROUND:\n              setZoneState(node, NodePowerState.GROUND);\n              break;\n            case ElementType.NPN: {\n              // Maybe I should iterate over elements instead of zones?\n              const pin1Zone = pinIdToNode.get(`${element.id}:0`);\n              const pin2Zone = pinIdToNode.get(`${element.id}:1`);\n              const pin3Zone = pinIdToNode.get(`${element.id}:2`);\n\n              if (\n                pin1Zone &&\n                pin1Zone.state === NodePowerState.GROUND &&\n                pin2Zone &&\n                pin2Zone.state === NodePowerState.POWER &&\n                pin3Zone\n              ) {\n                setZoneState(pin3Zone, NodePowerState.POWER);\n              }\n              break;\n            }\n            case ElementType.PNP: {\n              // Maybe I should iterate over elements instead of zones?\n              const pin1Zone = pinIdToNode.get(`${element.id}:0`);\n              const pin2Zone = pinIdToNode.get(`${element.id}:1`);\n              const pin3Zone = pinIdToNode.get(`${element.id}:2`);\n\n              if (\n                pin1Zone &&\n                pin1Zone.state === NodePowerState.POWER &&\n                pin2Zone &&\n                pin2Zone.state === NodePowerState.GROUND &&\n                pin3Zone\n              ) {\n                setZoneState(pin3Zone, NodePowerState.GROUND);\n              }\n              break;\n            }\n          }\n\n          if (isShortCircuit) {\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  const inputElements = elements.filter((el) => el.type === ElementType.INPUT);\n  const pinIdToNodes = new Map<PinId, Node>();\n  const nodes = new Set<Node>();\n\n  for (const [p1, p2] of connections) {\n    const pinId1 = getPinId(p1);\n    const pinId2 = getPinId(p2);\n\n    const node1 = pinIdToNodes.get(pinId1);\n    const node2 = pinIdToNodes.get(pinId2);\n\n    if (node1 && node2) {\n      const mergedNode = [...node1, ...node2];\n\n      nodes.delete(node1);\n      nodes.delete(node2);\n      nodes.add(mergedNode);\n\n      for (const pinId of mergedNode) {\n        pinIdToNodes.set(pinId, mergedNode);\n      }\n    } else if (node1) {\n      node1.push(pinId2);\n      pinIdToNodes.set(pinId2, node1);\n    } else if (node2) {\n      node2.push(pinId1);\n      pinIdToNodes.set(pinId1, node2);\n    } else {\n      const node = [pinId1, pinId2];\n      nodes.add(node);\n      pinIdToNodes.set(pinId1, node);\n      pinIdToNodes.set(pinId2, node);\n    }\n  }\n\n  const nodesList = [...nodes.values()].map((pins) => ({\n    state: NodePowerState.IMPEDANCE,\n    pins,\n  }));\n\n  buildNodesState(nodesList);\n\n  return nodesList;\n}\n","import type { Point } from 'common/types';\n\nexport function subtract(p1: Point, p2: Point): Point {\n  return {\n    x: p1.x - p2.x,\n    y: p1.y - p2.y,\n  };\n}\n\nexport function rotate(point: Point, a: number): Point {\n  const sinA = Math.sin(a);\n  const cosA = Math.cos(a);\n\n  return {\n    x: point.x * cosA - point.y * sinA,\n    y: point.x * sinA + point.y * cosA,\n  };\n}\n","import { useCallback, useRef, useState } from 'react';\n\nexport function useForceUpdate() {\n  const incRef = useRef(0);\n  const [, setInc] = useState(incRef.current);\n\n  return useCallback(() => {\n    incRef.current += 1;\n    setInc(incRef.current);\n  }, []);\n}\n","import { defaults, last, pick, throttle, without } from 'lodash-es';\nimport im from 'immer';\nimport shallowequal from 'shallowequal';\n\nimport {\n  Connection,\n  Coords,\n  Cursor,\n  Element,\n  ElementId,\n  ElementType,\n  GameId,\n  ObjectType,\n  Options,\n  Point,\n} from 'common/types';\nimport {\n  AUTO_SAVE_INTERVAL,\n  defaultOptions,\n  elementsDescriptions,\n  ICON_SIZE,\n  PIN_DOT_RADIUS,\n} from 'common/data';\nimport { rotate, subtract } from 'utils/trigano';\nimport { getNodesSimulationState, NodeState } from 'utils/simulation';\nimport { useForceUpdate } from 'hooks/useForceUpdate';\nimport { useHandler } from 'hooks/useHandler';\n\ntype HoverElement =\n  | {\n      type: ObjectType.ELEMENT;\n      elId: ElementId;\n    }\n  | {\n      type: ObjectType.PIN;\n      elId: ElementId;\n      pinIndex: number;\n    }\n  | {\n      type: ObjectType.CONNECTION;\n      connectionIndex: number;\n    };\n\ntype FocusElement =\n  | {\n      type: ObjectType.ELEMENT;\n      elId: ElementId;\n    }\n  | {\n      type: ObjectType.CONNECTION;\n      connectionIndex: number;\n    };\n\ntype WireElement = {\n  elId: ElementId;\n  pinIndex: number;\n  pullPos: Point | undefined;\n};\n\ntype ElementPointer = {\n  elId: ElementId;\n};\n\ntype MouseState = {\n  isMouseDown: boolean;\n};\n\ntype PanState = {\n  isPan: boolean;\n};\n\nfunction dropIndex<T>(items: T[], dropIndex: number): T[] {\n  return items.filter((value, index) => index !== dropIndex);\n}\n\nexport function getGameIdStorageKey(gameId: GameId): string {\n  return `sch_game_${gameId}`;\n}\n\nexport function getGameIdPreviewStorageKey(gameId: GameId): string {\n  return `sch_game_preview_${gameId}`;\n}\n\ntype CmpGameModelState = {\n  elements: Element[];\n  connections: Connection[];\n  inputSignals: boolean[];\n  pos: Point;\n  options: Options;\n  hoverElement: HoverElement | undefined;\n  focusElement: FocusElement | undefined;\n  wireElement: WireElement | undefined;\n  movingElement: ElementPointer | undefined;\n  panState: PanState;\n};\n\nexport type GameModelState = CmpGameModelState & {\n  cursor: Cursor | undefined;\n  nodesSimulation: NodeState[] | undefined;\n};\n\nfunction watch(\n  target: GameModel,\n  propertyKey: string,\n  descriptor: PropertyDescriptor,\n) {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = function watch(...args: unknown[]) {\n    if (!(this instanceof GameModel)) {\n      throw new Error();\n    }\n\n    let iAmWatcher = false;\n\n    if (!this.underWatch) {\n      iAmWatcher = true;\n      this.underWatch = true;\n    }\n\n    const before = this.getState();\n    const results = originalMethod.apply(this, args);\n\n    if (iAmWatcher) {\n      if (!this.needTriggerUpdate) {\n        const after = this.getState();\n        this.needTriggerUpdate = before !== after;\n      }\n\n      if (this.needTriggerUpdate) {\n        this.needTriggerUpdate = false;\n        this.triggerUpdate();\n      }\n\n      this.underWatch = false;\n    }\n\n    return results;\n  };\n}\n\nfunction draw(\n  target: GameModel,\n  propertyKey: string,\n  descriptor: PropertyDescriptor,\n) {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = function draw(...args: unknown[]) {\n    if (!(this instanceof GameModel)) {\n      throw new Error();\n    }\n\n    const results = originalMethod.apply(this, args);\n\n    if (this.underWatch) {\n      this.needTriggerUpdate = true;\n    } else {\n      this.triggerUpdate();\n    }\n\n    return results;\n  };\n}\n\nexport class GameModel {\n  public static createEmptyModel(gameId: GameId): GameModel {\n    return new GameModel({\n      gameId,\n      pos: { x: 0, y: 0 },\n      elements: [],\n      connections: [],\n      inputSignals: [],\n      options: defaultOptions,\n    });\n  }\n\n  protected static getLoadedState(gameId: GameId) {\n    const json = localStorage.getItem(getGameIdStorageKey(gameId));\n\n    if (!json) {\n      throw new Error('No saved game');\n    }\n\n    const {\n      pos,\n      elements,\n      inputSignals,\n      connections,\n      options: savedOptions,\n    } = JSON.parse(json);\n\n    const optionsNames = Object.keys(defaultOptions);\n    const options = defaults(pick(savedOptions, optionsNames), defaultOptions);\n\n    return {\n      gameId,\n      pos,\n      elements,\n      connections,\n      inputSignals,\n      options,\n    };\n  }\n\n  public static checkSavedGame(gameId: GameId): boolean {\n    const json = localStorage.getItem(getGameIdStorageKey(gameId));\n    return Boolean(json);\n  }\n\n  public static loadGame(gameId: GameId): GameModel {\n    return new GameModel(GameModel.getLoadedState(gameId));\n  }\n\n  public static removeGame(gameId: GameId) {\n    localStorage.removeItem(getGameIdStorageKey(gameId));\n  }\n\n  public static cloneGame(gameId: GameId, toGameId: GameId): void {\n    const json = localStorage.getItem(getGameIdStorageKey(gameId));\n    if (json) {\n      localStorage.setItem(getGameIdStorageKey(toGameId), json);\n    }\n  }\n\n  public underWatch = false;\n  public needTriggerUpdate = false;\n\n  private readonly gameId: GameId;\n  private drawHandler?: () => void;\n  private destroying = false;\n\n  private elements: Element[];\n  private connections: Connection[];\n  private inputSignals: boolean[];\n  private pos: Point;\n  private options: Options;\n  private hoverElement: HoverElement | undefined;\n  private focusElement: FocusElement | undefined;\n  private wireElement: WireElement | undefined;\n  private movingElement: ElementPointer | undefined;\n  private mousePos: Point | undefined;\n  private mouseState: MouseState;\n  private panState: PanState;\n  private lastStateSnapshot:\n    | {\n        cmpState: CmpGameModelState;\n        state: GameModelState;\n      }\n    | undefined;\n\n  private getPreview: (() => string | undefined) | undefined;\n\n  public stateListeners: {\n    forceUpdate: () => void;\n    selector: (state: GameModelState) => unknown;\n    lastSelectedValue: unknown | undefined;\n    actualSelectedValue: { value: unknown } | undefined;\n    isActual: boolean;\n  }[];\n\n  private constructor({\n    gameId,\n    elements,\n    connections,\n    inputSignals,\n    pos,\n    options,\n  }: {\n    gameId: GameId;\n    elements: Element[];\n    connections: Connection[];\n    inputSignals: boolean[];\n    pos: Point;\n    options: Options;\n  }) {\n    this.gameId = gameId;\n\n    this.elements = elements;\n    this.connections = connections;\n    this.inputSignals = inputSignals;\n    this.pos = pos;\n    this.options = options;\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    window.gameModel = this;\n\n    this.hoverElement = undefined;\n    this.focusElement = undefined;\n    this.wireElement = undefined;\n    this.movingElement = undefined;\n    this.mouseState = {\n      isMouseDown: false,\n    };\n    this.panState = {\n      isPan: false,\n    };\n    this.mousePos = undefined;\n    this.stateListeners = [];\n    this.lastStateSnapshot = undefined;\n  }\n\n  public destroy() {\n    this.destroying = true;\n    this.saveGameThrottled.flush();\n    this.clearState();\n    this.drawHandler = undefined;\n    this.getPreview = undefined;\n  }\n\n  public setDrawHandler(drawHandler: (() => void) | undefined): void {\n    this.drawHandler = drawHandler;\n  }\n\n  public setPreviewHandler(handler: () => string | undefined): void {\n    this.getPreview = handler;\n  }\n\n  public saveGame(): void {\n    localStorage.setItem(\n      getGameIdStorageKey(this.gameId),\n      JSON.stringify({\n        pos: this.pos,\n        elements: this.elements,\n        inputSignals: this.inputSignals,\n        connections: this.connections,\n        options: this.options,\n      }),\n    );\n\n    try {\n      const preview = this.getPreview?.();\n\n      if (preview) {\n        localStorage.setItem(getGameIdPreviewStorageKey(this.gameId), preview);\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  }\n\n  private saveGameThrottled = throttle(this.saveGame, AUTO_SAVE_INTERVAL, {\n    leading: false,\n    trailing: true,\n  });\n\n  public getState(): GameModelState {\n    const cmpState: CmpGameModelState = {\n      elements: this.elements,\n      connections: this.connections,\n      inputSignals: this.inputSignals,\n      pos: this.pos,\n      options: this.options,\n      hoverElement: this.hoverElement,\n      focusElement: this.focusElement,\n      wireElement: this.wireElement,\n      movingElement: this.movingElement,\n      panState: this.panState,\n    };\n\n    if (\n      !this.lastStateSnapshot ||\n      !shallowequal(cmpState, this.lastStateSnapshot.cmpState)\n    ) {\n      this.lastStateSnapshot = {\n        cmpState,\n        state: {\n          ...cmpState,\n          cursor: this.getCursor(),\n          nodesSimulation: this.getSimulation(),\n        },\n      };\n    }\n\n    return this.lastStateSnapshot.state;\n  }\n\n  @watch\n  public deleteElementInFocus(): void {\n    const focusTarget = this.focusElement;\n\n    if (!focusTarget) {\n      return;\n    }\n\n    switch (focusTarget.type) {\n      case ObjectType.ELEMENT: {\n        this.connections = this.connections.filter(\n          ([p1, p2]) =>\n            p1.elId !== focusTarget.elId && p2.elId !== focusTarget.elId,\n        );\n\n        const element = this.elements.find(({ id }) => id === focusTarget.elId);\n\n        if (!element) {\n          throw new Error();\n        }\n\n        if (element.type === ElementType.INPUT) {\n          const inputIndex = this.elements\n            .filter(({ type }) => type === ElementType.INPUT)\n            .indexOf(element);\n\n          this.inputSignals = dropIndex(this.inputSignals, inputIndex);\n        }\n\n        this.elements = without(this.elements, element);\n        break;\n      }\n      case ObjectType.CONNECTION:\n        this.connections = dropIndex(\n          this.connections,\n          focusTarget.connectionIndex,\n        );\n        break;\n    }\n\n    this.focusElement = undefined;\n  }\n\n  @draw\n  public updateInputSignals(inputSignals: boolean[]): void {\n    this.inputSignals = inputSignals;\n  }\n\n  @draw\n  public updateOptions(options: Options): void {\n    this.options = options;\n  }\n\n  public onMouseDown(): void {\n    if (this.mouseState.isMouseDown) {\n      this.onMouseUp();\n    }\n\n    this.mouseState.isMouseDown = true;\n  }\n\n  @watch\n  public onMouseMove({\n    position: { x, y },\n    movement: { x: dX, y: dY },\n  }: {\n    position: Point;\n    movement: Point;\n  }): void {\n    this.mousePos = {\n      x,\n      y,\n    };\n\n    this.checkHover();\n\n    const isMoving = Boolean(this.movingElement);\n\n    if (this.mouseState.isMouseDown) {\n      if (\n        !isMoving &&\n        !this.wireElement &&\n        this.hoverElement &&\n        this.hoverElement.type === ObjectType.PIN\n      ) {\n        this.startWiring({\n          elId: this.hoverElement.elId,\n          pinIndex: this.hoverElement.pinIndex,\n        });\n      }\n\n      if (\n        !isMoving &&\n        !this.wireElement &&\n        this.hoverElement &&\n        this.hoverElement.type === ObjectType.ELEMENT\n      ) {\n        this.movingElement = {\n          elId: this.hoverElement.elId,\n        };\n\n        this.focusElement = {\n          type: ObjectType.ELEMENT,\n          elId: this.hoverElement.elId,\n        };\n      }\n\n      if (!this.wireElement && !this.movingElement && !this.panState.isPan) {\n        this.panState = {\n          isPan: true,\n        };\n      }\n\n      const { movingElement } = this;\n      if (movingElement) {\n        this.updateElement(movingElement.elId, (el) => {\n          el.pos.x += dX;\n          el.pos.y += dY;\n        });\n      } else if (!this.wireElement) {\n        this.pos = {\n          x: this.pos.x + dX,\n          y: this.pos.y + dY,\n        };\n      }\n    } else if (this.panState.isPan) {\n      this.panState = {\n        isPan: false,\n      };\n    }\n\n    if (this.wireElement) {\n      this.wireElement = im(this.wireElement, (wire) => {\n        if (!this.mousePos) {\n          wire.pullPos = undefined;\n          return;\n        }\n\n        const x = this.mousePos.x - this.pos.x;\n        const y = this.mousePos.y - this.pos.y;\n\n        if (wire.pullPos) {\n          wire.pullPos.x = x;\n          wire.pullPos.y = y;\n        } else {\n          wire.pullPos = { x, y };\n        }\n      });\n    }\n  }\n\n  @watch\n  public onMouseUp() {\n    this.mouseState = {\n      isMouseDown: false,\n    };\n\n    if (this.focusElement && !this.wireElement && !this.movingElement) {\n      this.focusElement = undefined;\n    }\n\n    if (this.movingElement) {\n      this.movingElement = undefined;\n    }\n\n    if (this.panState.isPan) {\n      this.panState = {\n        isPan: false,\n      };\n    }\n\n    if (this.wireElement) {\n      if (\n        this.hoverElement &&\n        this.hoverElement.type === ObjectType.PIN &&\n        this.wireElement.elId !== this.hoverElement.elId\n      ) {\n        this.connections = [\n          ...this.connections,\n          [\n            {\n              elId: this.hoverElement.elId,\n              pinIndex: this.hoverElement.pinIndex,\n            },\n            {\n              elId: this.wireElement.elId,\n              pinIndex: this.wireElement.pinIndex,\n            },\n          ],\n        ];\n      }\n\n      this.wireElement = undefined;\n    } else if (!this.wireElement) {\n      if (this.hoverElement && this.hoverElement.type === ObjectType.PIN) {\n        this.startWiring({\n          elId: this.hoverElement.elId,\n          pinIndex: this.hoverElement.pinIndex,\n        });\n      }\n\n      if (this.hoverElement) {\n        if (this.hoverElement.type === ObjectType.ELEMENT) {\n          if (\n            !this.focusElement ||\n            this.focusElement.type !== ObjectType.ELEMENT ||\n            this.focusElement.elId !== this.hoverElement.elId\n          ) {\n            this.focusElement = {\n              type: ObjectType.ELEMENT,\n              elId: this.hoverElement.elId,\n            };\n          }\n        } else if (this.hoverElement.type === ObjectType.CONNECTION) {\n          if (\n            !this.focusElement ||\n            this.focusElement.type !== ObjectType.CONNECTION ||\n            this.focusElement.connectionIndex !==\n              this.hoverElement.connectionIndex\n          ) {\n            this.focusElement = {\n              type: ObjectType.CONNECTION,\n              connectionIndex: this.hoverElement.connectionIndex,\n            };\n          }\n        }\n      }\n    }\n  }\n\n  public getCursor(): Cursor {\n    const { wireElement, hoverElement, panState } = this;\n\n    if (wireElement) {\n      return 'pointer';\n    }\n\n    if (hoverElement) {\n      switch (hoverElement.type) {\n        case ObjectType.PIN:\n        case ObjectType.CONNECTION:\n          return 'pointer';\n        case ObjectType.ELEMENT:\n          return 'move';\n      }\n\n      if (panState.isPan) {\n        return 'grabbing';\n      }\n    } else {\n      if (panState.isPan) {\n        return 'move';\n      }\n    }\n\n    return 'initial';\n  }\n\n  @draw\n  public addElement(type: ElementType) {\n    const pos = { ...this.pos };\n\n    while (this.checkOverlap(pos)) {\n      pos.x += ICON_SIZE + 20;\n    }\n\n    this.elements = [\n      ...this.elements,\n      {\n        type,\n        id: this.getNextId(),\n        pos,\n      },\n    ];\n\n    if (type === ElementType.INPUT) {\n      this.inputSignals = [...this.inputSignals, false];\n    }\n  }\n\n  @watch\n  private startWiring({\n    elId,\n    pinIndex,\n  }: {\n    elId: ElementId;\n    pinIndex: number;\n  }) {\n    this.focusElement = {\n      type: ObjectType.ELEMENT,\n      elId,\n    };\n\n    this.wireElement = {\n      elId,\n      pinIndex,\n      pullPos: this.mousePos,\n    };\n  }\n\n  @watch\n  public resetCursorState(): void {\n    this.movingElement = undefined;\n    this.wireElement = undefined;\n\n    if (this.mouseState.isMouseDown) {\n      this.mouseState = {\n        isMouseDown: false,\n      };\n    }\n\n    if (this.panState.isPan) {\n      this.panState = {\n        isPan: false,\n      };\n    }\n  }\n\n  public triggerUpdate() {\n    if (this.destroying) {\n      return;\n    }\n\n    if (this.drawHandler) {\n      this.drawHandler();\n    }\n\n    this.saveGameThrottled();\n\n    const state = this.getState();\n\n    for (const listener of this.stateListeners) {\n      listener.isActual = false;\n    }\n\n    for (const listener of this.stateListeners) {\n      if (listener.isActual) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      const { forceUpdate, selector, lastSelectedValue } = listener;\n\n      const selectedValue = selector(state);\n\n      if (!shallowequal(selectedValue, lastSelectedValue)) {\n        listener.actualSelectedValue = { value: selectedValue };\n        forceUpdate();\n      }\n    }\n\n    for (const listener of this.stateListeners) {\n      listener.actualSelectedValue = undefined;\n    }\n  }\n\n  @draw\n  public clearState() {\n    this.pos = { x: 0, y: 0 };\n    this.elements = [];\n    this.connections = [];\n    this.inputSignals = [];\n    this.hoverElement = undefined;\n    this.focusElement = undefined;\n    this.movingElement = undefined;\n    this.wireElement = undefined;\n    this.panState.isPan = false;\n    this.mouseState.isMouseDown = false;\n  }\n\n  @draw\n  public reloadFromSave() {\n    try {\n      const { elements, connections, pos, options, inputSignals } =\n        GameModel.getLoadedState(this.gameId);\n\n      this.clearState();\n\n      this.elements = elements;\n      this.connections = connections;\n      this.pos = pos;\n      this.options = options;\n      this.inputSignals = inputSignals;\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error(\"Can't load state:\", error);\n    }\n  }\n\n  @watch\n  private updateElement(\n    elId: ElementId,\n    callback: (el: Element) => void,\n  ): void {\n    this.elements = im(this.elements, (elements) => {\n      const el = elements.find((el) => el.id === elId);\n\n      if (!el) {\n        throw new Error(`Element ${elId} is not found`);\n      }\n\n      callback(el);\n    });\n  }\n\n  @watch\n  private checkHover(): void {\n    if (!this.mousePos) {\n      this.hoverElement = undefined;\n      return;\n    }\n\n    const point = subtract(this.mousePos, this.pos);\n\n    const hoverElement =\n      this.checkPinHover(point) ||\n      this.checkElementHover(point) ||\n      this.checkConnectionHover(point);\n\n    if (!shallowequal(this.hoverElement, hoverElement)) {\n      this.hoverElement = hoverElement;\n    }\n  }\n\n  private checkPinHover({ x, y }: Point): HoverElement | undefined {\n    for (const element of this.elements) {\n      const { pins } = elementsDescriptions[element.type];\n\n      const x0 = element.pos.x - ICON_SIZE / 2;\n      const y0 = element.pos.y - ICON_SIZE / 2;\n\n      for (const pin of pins) {\n        if (\n          (x0 + pin.pos.x * ICON_SIZE - x) ** 2 +\n            (y0 + pin.pos.y * ICON_SIZE - y) ** 2 <\n          (PIN_DOT_RADIUS + 4) ** 2\n        ) {\n          return {\n            type: ObjectType.PIN,\n            elId: element.id,\n            pinIndex: pins.indexOf(pin),\n          };\n        }\n      }\n    }\n    return undefined;\n  }\n\n  private checkElementHover({ x, y }: Point): HoverElement | undefined {\n    for (const element of this.elements) {\n      const x0 = element.pos.x - ICON_SIZE / 2;\n      const y0 = element.pos.y - ICON_SIZE / 2;\n\n      if (x > x0 && x < x0 + ICON_SIZE && y > y0 && y < y0 + ICON_SIZE) {\n        return {\n          type: ObjectType.ELEMENT,\n          elId: element.id,\n        };\n      }\n    }\n    return undefined;\n  }\n\n  private checkConnectionHover({ x, y }: Point): HoverElement | undefined {\n    for (const connection of this.connections) {\n      const [p1, p2] = connection;\n\n      const point1 = this.getConnectionPinPosition(p1);\n      const point2 = this.getConnectionPinPosition(p2);\n\n      const shiftedPoint2 = subtract(point2, point1);\n      const shiftedMouse = subtract({ x, y }, point1);\n\n      const a = Math.atan2(shiftedPoint2.y, shiftedPoint2.x);\n\n      const rotatedPoint2 = rotate(shiftedPoint2, -a);\n      const rotatedMouse = rotate(shiftedMouse, -a);\n\n      const GAP = 10;\n\n      if (\n        rotatedMouse.x >= -GAP &&\n        rotatedMouse.x <= rotatedPoint2.x + GAP &&\n        rotatedMouse.y > -GAP &&\n        rotatedMouse.y < GAP\n      ) {\n        return {\n          type: ObjectType.CONNECTION,\n          connectionIndex: this.connections.indexOf(connection),\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private applyHoverElement(element: HoverElement): void {\n    // before set check if already hovered\n    if (!shallowequal(this.hoverElement, element)) {\n      this.hoverElement = element;\n    }\n  }\n\n  private getConnectionPinPosition({\n    elId,\n    pinIndex,\n  }: {\n    elId: ElementId;\n    pinIndex: number;\n  }): Coords {\n    const el = this.getElById(elId);\n\n    const pin = elementsDescriptions[el.type].pins[pinIndex];\n\n    return {\n      x: el.pos.x + (pin.pos.x - 0.5) * ICON_SIZE,\n      y: el.pos.y + (pin.pos.y - 0.5) * ICON_SIZE,\n    };\n  }\n\n  private getElById(id: ElementId): Element {\n    const el = this.elements.find((el) => el.id === id);\n\n    if (!el) {\n      throw new Error('Element not found');\n    }\n\n    return el;\n  }\n\n  private checkOverlap(point: Coords): boolean {\n    for (const { pos } of this.elements) {\n      if (\n        (pos.x - point.x) ** 2 + (pos.y - point.y) ** 2 <\n        (ICON_SIZE / 2) ** 2\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private getNextId(): ElementId {\n    const lastElement = last(this.elements);\n\n    if (!lastElement) {\n      return `el1`;\n    }\n\n    const match = lastElement.id.match(/^el(\\d+)$/);\n\n    if (!match) {\n      throw new Error();\n    }\n\n    return `el${parseInt(match[1], 10) + 1}`;\n  }\n\n  public allowOpenContextMenu(): boolean {\n    return !this.hoverElement && !this.wireElement && !this.panState.isPan;\n  }\n\n  private getSimulation() {\n    if (!this.options.simulate) {\n      return undefined;\n    }\n\n    return getNodesSimulationState(\n      this.elements,\n      this.connections,\n      this.inputSignals,\n    );\n  }\n}\n\nexport function useGameState<T>(\n  gameModel: GameModel,\n  selector: (gameState: GameModelState) => T,\n): T {\n  const forceUpdate = useForceUpdate();\n\n  const already = gameModel.stateListeners.find(\n    (listener) => listener.forceUpdate === forceUpdate,\n  );\n\n  const selectorHandler = useHandler(selector);\n\n  const gameState = gameModel.getState();\n\n  if (already) {\n    already.isActual = true;\n    let selectedValue;\n\n    if (already.actualSelectedValue) {\n      selectedValue = already.actualSelectedValue.value as T;\n    } else {\n      selectedValue = selectorHandler(gameState);\n    }\n\n    already.lastSelectedValue = selectedValue;\n    already.isActual = true;\n\n    return selectedValue;\n  }\n\n  const selectedValue = selectorHandler(gameState);\n\n  gameModel.stateListeners.push({\n    forceUpdate,\n    selector: selectorHandler,\n    actualSelectedValue: undefined,\n    lastSelectedValue: selectedValue,\n    isActual: true,\n  });\n\n  return selectedValue;\n}\n","import { useEffect, useRef } from 'react';\n\nimport { styled } from 'stitches';\nimport type { GameId, GameSaveDescriptor } from 'common/types';\nimport { PREVIEW_HEIGHT, PREVIEW_WIDTH } from 'common/data';\nimport { GameModel, getGameIdPreviewStorageKey } from 'models/GameModel';\nimport { insert } from 'utils/array';\nimport { getNextGameId } from 'utils/game';\nimport { useForceUpdate } from 'hooks/useForceUpdate';\n\nconst NO_PREVIEW = 'NO_PREVIEW';\n\nconst _Wrapper = styled('div', {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'start',\n  height: '100%',\n  padding: 16,\n  boxSizing: 'border-box',\n\n  '> *': {\n    flexShrink: 0,\n  },\n});\n\nconst _Title = styled('h1', {\n  margin: '0 0 10px',\n});\n\nconst _GameTitle = styled('h2', {\n  marginBottom: 10,\n  fontVariant: '18|24',\n});\n\nconst _List = styled('ul', {\n  flexShrink: 1,\n  marginBottom: 15,\n  paddingRight: 10,\n  overflow: 'hidden',\n  overflowY: 'auto',\n});\n\nconst _ListItem = styled('li', {\n  display: 'flex',\n  alignItems: 'center',\n  padding: '5px 0',\n});\n\nconst _PreviewLink = styled('a', {\n  display: 'block',\n  textDecoration: 'none',\n});\n\nconst previewStyles = {\n  width: PREVIEW_WIDTH,\n  height: PREVIEW_HEIGHT,\n  marginRight: 10,\n  border: '1px solid #888',\n  overflow: 'hidden',\n};\n\nconst _PreviewBox = styled('div', previewStyles);\n\nconst _PreviewImage = styled('img', {\n  ...previewStyles,\n  display: 'block',\n});\n\nconst _NoPreview = styled('div', {\n  ...previewStyles,\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  textAlign: 'center',\n  fontVariant: '14|18',\n  color: '#888',\n});\n\nconst _GameLinkWrapper = styled('p', {\n  minWidth: 200,\n  marginRight: 16,\n});\n\nconst _GameLink = styled('a', {});\n\nconst _Button = styled('button', {\n  '+ button': {\n    marginLeft: 5,\n  },\n});\n\nconst _NewGameButton = styled('button');\n\ntype PreviewBlobs = Record<\n  GameId,\n  | {\n      imageUrl: string;\n    }\n  | 'NO_PREVIEW'\n>;\n\ntype Props = {\n  currentGames: GameSaveDescriptor[];\n  setCurrentGames: (games: GameSaveDescriptor[]) => void;\n};\n\nexport function MainMenu({ currentGames, setCurrentGames }: Props) {\n  const previewsRef = useRef<PreviewBlobs>({});\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    let isDestroying = false;\n\n    for (const { id: gameId } of currentGames) {\n      try {\n        const previewData = localStorage.getItem(\n          getGameIdPreviewStorageKey(gameId),\n        );\n\n        if (previewData) {\n          fetch(previewData)\n            .then((res) => res.blob())\n            // eslint-disable-next-line no-loop-func,@typescript-eslint/no-loop-func\n            .then((blob) => {\n              if (!isDestroying) {\n                previewsRef.current[gameId] = {\n                  imageUrl: URL.createObjectURL(blob),\n                };\n                forceUpdate();\n              }\n            });\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n\n      previewsRef.current[gameId] = NO_PREVIEW;\n    }\n\n    return () => {\n      isDestroying = true;\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      for (const preview of Object.values(previewsRef.current)) {\n        if (preview !== NO_PREVIEW) {\n          URL.revokeObjectURL(preview.imageUrl);\n        }\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <_Wrapper>\n      <_Title>Schematic</_Title>\n      <_GameTitle>Current schemas:</_GameTitle>\n      <_List>\n        {currentGames.length ? (\n          currentGames.map(({ id: gameId, title }, index) => {\n            let preview;\n\n            const imageState = previewsRef.current[gameId];\n\n            if (imageState === NO_PREVIEW) {\n              preview = <_NoPreview>No preview</_NoPreview>;\n            } else if (imageState) {\n              preview = <_PreviewImage src={imageState.imageUrl} />;\n            } else {\n              preview = <_PreviewBox />;\n            }\n\n            return (\n              <_ListItem key={gameId}>\n                <_PreviewLink href={`#${gameId}`}>{preview}</_PreviewLink>\n                <_GameLinkWrapper>\n                  <_GameLink href={`#${gameId}`}>{title}</_GameLink>\n                </_GameLinkWrapper>\n                <_Button\n                  type=\"button\"\n                  onClick={(e) => {\n                    e.preventDefault();\n\n                    // eslint-disable-next-line no-alert\n                    const title = window.prompt('Enter new game name');\n\n                    if (!title || !title.trim()) {\n                      return;\n                    }\n\n                    setCurrentGames(\n                      currentGames.map((item, i) => {\n                        if (i === index) {\n                          return {\n                            ...item,\n                            title,\n                          };\n                        }\n\n                        return item;\n                      }),\n                    );\n                  }}\n                >\n                  rename\n                </_Button>\n                <_Button\n                  type=\"button\"\n                  onClick={(e) => {\n                    e.preventDefault();\n\n                    // eslint-disable-next-line no-alert\n                    const title = window.prompt('Enter clone game name');\n\n                    if (!title || !title.trim()) {\n                      return;\n                    }\n\n                    const clonedGame = {\n                      id: getNextGameId(currentGames),\n                      title,\n                    };\n\n                    GameModel.cloneGame(gameId, clonedGame.id);\n\n                    setCurrentGames(insert(currentGames, clonedGame, index));\n                  }}\n                >\n                  clone\n                </_Button>\n                <_Button\n                  type=\"button\"\n                  onClick={(e) => {\n                    e.preventDefault();\n\n                    // eslint-disable-next-line no-alert\n                    if (window.confirm('Are you sure?')) {\n                      setCurrentGames(\n                        currentGames.filter((game) => game.id !== gameId),\n                      );\n                      GameModel.removeGame(gameId);\n                    }\n                  }}\n                >\n                  x\n                </_Button>\n              </_ListItem>\n            );\n          })\n        ) : (\n          <div>no saved schemas</div>\n        )}\n      </_List>\n      <_NewGameButton\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          const newGameId = getNextGameId(currentGames);\n\n          // eslint-disable-next-line no-alert\n          const title = window.prompt('Enter new game name');\n\n          if (!title || !title.trim()) {\n            return;\n          }\n\n          setCurrentGames([\n            ...currentGames,\n            {\n              id: newGameId,\n              title: title.trim(),\n            },\n          ]);\n\n          window.setTimeout(() => {\n            window.location.assign(`#${newGameId}`);\n          }, 0);\n        }}\n      >\n        New schema\n      </_NewGameButton>\n    </_Wrapper>\n  );\n}\n","export function insert<T>(array: T[], item: T, index: number): T[] {\n  return [...array.slice(0, index), item, ...array.slice(index)];\n}\n","import { useRef } from 'react';\n\nexport function useRefState<D>(value: D): D {\n  const ref = useRef<D>(value);\n  return ref.current;\n}\n","export function getCanvasContext(\n  canvas: HTMLCanvasElement | null | undefined,\n): CanvasRenderingContext2D {\n  if (!canvas) {\n    throw new Error();\n  }\n\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error();\n  }\n\n  return ctx;\n}\n","import { Element, ElementType } from './types';\n\nconst INPUT_LITERALS = 'ABCDEFGHIJ';\nconst OUTPUT_LITERALS = 'YZXWVUTSRQ';\n\nexport function getLiteralForSignalByIndex({\n  elementsCount,\n  index,\n  isInput,\n  isVector,\n}: {\n  elementsCount: number;\n  index: number;\n  isInput: boolean;\n  isVector: boolean;\n}) {\n  const charVariants = isInput ? INPUT_LITERALS : OUTPUT_LITERALS;\n\n  if (!isVector && elementsCount <= charVariants.length) {\n    return charVariants.charAt(index);\n  }\n\n  return isInput ? `I${index}` : `Y${index}`;\n}\n\nexport function getLiteralForSignal(\n  elements: Element[],\n  element: Element,\n  isVector = false,\n): string {\n  return getLiteralForSignalByIndex({\n    elementsCount: elements.length,\n    index: elements.indexOf(element),\n    isInput: element.type === ElementType.INPUT,\n    isVector,\n  });\n}\n","import {\n  Assets,\n  BoxSize,\n  Element,\n  ElementId,\n  ElementType,\n  ObjectType,\n} from 'common/types';\nimport { getLiteralForSignal } from 'common/common';\nimport {\n  elementsDescriptions,\n  FOCUS_SIZE,\n  ICON_SIZE,\n  PIN_DOT_RADIUS,\n} from 'common/data';\nimport { GameModelState } from 'models/GameModel';\nimport { getPinId, NodePowerState, PinId } from './simulation';\n\nexport function render(\n  ctx: CanvasRenderingContext2D,\n  {\n    gameState,\n    size,\n    densityFactor,\n    assets,\n    tick,\n  }: {\n    gameState: GameModelState;\n    size: BoxSize;\n    densityFactor: number;\n    assets: Assets;\n    tick: number;\n  },\n) {\n  const {\n    pos,\n    elements,\n    connections,\n    focusElement,\n    hoverElement,\n    wireElement,\n    options,\n    nodesSimulation,\n  } = gameState;\n\n  function getElById(elId: ElementId): Element {\n    const el = elements.find((el) => el.id === elId);\n\n    if (!el) {\n      throw new Error(`Element ${elId} is not found`);\n    }\n\n    return el;\n  }\n\n  const simulationPins = new Map<PinId, NodePowerState>();\n\n  if (nodesSimulation) {\n    for (const node of nodesSimulation) {\n      for (const pin of node.pins) {\n        simulationPins.set(pin, node.state);\n      }\n    }\n  }\n\n  ctx.save();\n  ctx.clearRect(0, 0, size.width * densityFactor, size.height * densityFactor);\n\n  if (densityFactor !== 1) {\n    ctx.scale(densityFactor, densityFactor);\n  }\n\n  ctx.translate(\n    Math.floor(size.width / 2) + pos.x,\n    Math.floor(size.height / 2) + pos.y,\n  );\n\n  if (options.debugDrawAxis) {\n    ctx.save();\n\n    ctx.lineWidth = 1;\n    ctx.textBaseline = 'middle';\n    ctx.textAlign = 'center';\n    ctx.font = '15px sans-serif';\n    ctx.fillStyle = '#333';\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(100, 0);\n    ctx.moveTo(95, -5);\n    ctx.lineTo(100, 0);\n    ctx.moveTo(95, 5);\n    ctx.lineTo(100, 0);\n    ctx.strokeStyle = '#0f0';\n    ctx.stroke();\n    ctx.fillText('X', 90, 15);\n\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(0, 100);\n    ctx.moveTo(-5, 95);\n    ctx.lineTo(0, 100);\n    ctx.moveTo(5, 95);\n    ctx.lineTo(0, 100);\n    ctx.strokeStyle = '#00f';\n    ctx.stroke();\n    ctx.fillText('Y', 12, 90);\n\n    ctx.restore();\n  }\n\n  for (const element of elements) {\n    const { pos } = element;\n\n    const isHover =\n      hoverElement &&\n      hoverElement.type === ObjectType.ELEMENT &&\n      element.id === hoverElement.elId;\n\n    const isFocus =\n      focusElement &&\n      focusElement.type === ObjectType.ELEMENT &&\n      focusElement.elId === element.id;\n\n    if (isHover || isFocus) {\n      ctx.save();\n\n      if (isHover) {\n        ctx.strokeStyle = isFocus ? '#7f7fff' : '#e5e5e5';\n        ctx.lineWidth = 3;\n      } else {\n        ctx.strokeStyle = '#bebeff';\n        ctx.lineWidth = 2;\n      }\n\n      ctx.strokeRect(\n        pos.x - FOCUS_SIZE / 2,\n        pos.y - FOCUS_SIZE / 2,\n        FOCUS_SIZE,\n        FOCUS_SIZE,\n      );\n      ctx.restore();\n    }\n  }\n\n  let index = 0;\n  for (const [p1, p2] of connections) {\n    const el1 = getElById(p1.elId);\n    const el2 = getElById(p2.elId);\n\n    const nodeState = simulationPins.get(getPinId(p1));\n\n    const pin1 = elementsDescriptions[el1.type].pins[p1.pinIndex];\n    const pin2 = elementsDescriptions[el2.type].pins[p2.pinIndex];\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(\n      el1.pos.x - ICON_SIZE / 2 + pin1.pos.x * ICON_SIZE,\n      el1.pos.y - ICON_SIZE / 2 + pin1.pos.y * ICON_SIZE,\n    );\n    ctx.lineTo(\n      el2.pos.x - ICON_SIZE / 2 + pin2.pos.x * ICON_SIZE,\n      el2.pos.y - ICON_SIZE / 2 + pin2.pos.y * ICON_SIZE,\n    );\n\n    const isHovered =\n      hoverElement &&\n      hoverElement.type === ObjectType.CONNECTION &&\n      hoverElement.connectionIndex === index;\n\n    const isInFocus =\n      focusElement &&\n      focusElement.type === ObjectType.CONNECTION &&\n      focusElement.connectionIndex === index;\n\n    let lineWidth = 1;\n\n    if (isHovered || isInFocus) {\n      lineWidth = 3;\n    } else if (nodeState === NodePowerState.SHORT_CIRCUIT) {\n      lineWidth = 2;\n    }\n\n    let color = '#333';\n    let drawDash = false;\n    let animateDash = false;\n\n    if (nodeState === NodePowerState.SHORT_CIRCUIT) {\n      color = '#f00';\n    } else if (nodeState === NodePowerState.POWER) {\n      color = '#ff9038';\n      drawDash = true;\n      animateDash = true;\n    } else if (nodeState === NodePowerState.GROUND) {\n      color = '#aaaaff';\n      drawDash = true;\n      animateDash = true;\n    } else if (nodeState === NodePowerState.IMPEDANCE) {\n      color = '#c7c7c7';\n      drawDash = true;\n    } else if (isHovered && isInFocus) {\n      color = '#8080ff';\n    } else if (isInFocus) {\n      color = '#bfbfff';\n    }\n\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = color;\n\n    if (drawDash && !isHovered) {\n      if (animateDash) {\n        ctx.setLineDash(tick % 2 ? [6, 6] : [0, 6, 6, 0]);\n      } else {\n        ctx.setLineDash([4, 11]);\n      }\n    }\n\n    ctx.stroke();\n\n    ctx.restore();\n\n    index += 1;\n  }\n\n  if (wireElement) {\n    const { elId, pinIndex } = wireElement;\n    const el = getElById(elId);\n\n    const { pos } = elementsDescriptions[el.type].pins[pinIndex];\n\n    const x0 = pos.x * ICON_SIZE + el.pos.x - ICON_SIZE / 2;\n    const y0 = pos.y * ICON_SIZE + el.pos.y - ICON_SIZE / 2;\n\n    if (wireElement.pullPos) {\n      const { x, y } = wireElement.pullPos;\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x, y);\n      ctx.strokeStyle = '#888';\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n  for (const element of elements) {\n    const { id, type, pos } = element;\n\n    if (type === ElementType.INPUT || type === ElementType.OUTPUT) {\n      const char = getLiteralForSignal(\n        elements.filter((el) => el.type === type),\n        element,\n        type === ElementType.INPUT\n          ? options.isInputVector\n          : options.isOutputVector,\n      );\n\n      ctx.save();\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = '24px sans-serif';\n      if (type === ElementType.INPUT) {\n        ctx.fillText(char, pos.x, pos.y - 10);\n      } else {\n        ctx.fillText(char, pos.x + 6, pos.y);\n      }\n      ctx.restore();\n    } else {\n      const [main, fallback]: ['x1', 'x2'] | ['x2', 'x1'] =\n        densityFactor > 1.5 ? ['x2', 'x1'] : ['x1', 'x2'];\n\n      const img = assets[main].images[type] ?? assets[fallback].images[type];\n\n      if (img) {\n        const x0 = pos.x - ICON_SIZE / 2;\n        const y0 = pos.y - ICON_SIZE / 2;\n\n        ctx.drawImage(img, x0, y0, ICON_SIZE, ICON_SIZE);\n      }\n    }\n\n    if (options.debugDrawId) {\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = '16px sans-serif';\n      ctx.fillText(id, pos.x + ICON_SIZE / 2 - 6, pos.y - ICON_SIZE / 2 + 6);\n    }\n\n    const { pins } = elementsDescriptions[type];\n    let i = 0;\n\n    for (const pin of pins) {\n      const isHovered =\n        hoverElement &&\n        hoverElement.type === ObjectType.PIN &&\n        hoverElement.elId === element.id &&\n        hoverElement.pinIndex === i;\n\n      const isWire =\n        wireElement &&\n        wireElement.elId === element.id &&\n        wireElement.pinIndex === i;\n\n      ctx.beginPath();\n      ctx.arc(\n        pos.x + (pin.pos.x - 0.5) * ICON_SIZE,\n        pos.y + (pin.pos.y - 0.5) * ICON_SIZE,\n        isHovered || isWire ? PIN_DOT_RADIUS + 1 : PIN_DOT_RADIUS,\n        0,\n        Math.PI * 2,\n      );\n      ctx.closePath();\n\n      const nodeState = simulationPins.get(\n        getPinId({ elId: element.id, pinIndex: i }),\n      );\n\n      let fillColor: string | undefined;\n      let noBorder = false;\n\n      if (\n        [\n          ElementType.DOT,\n          ElementType.INPUT,\n          ElementType.OUTPUT,\n          ElementType.GROUND,\n          ElementType.POWER,\n        ].includes(element.type)\n      ) {\n        switch (nodeState) {\n          case NodePowerState.SHORT_CIRCUIT:\n            fillColor = '#f00';\n            break;\n          case NodePowerState.POWER:\n            fillColor = '#ffc59b';\n            break;\n          case NodePowerState.GROUND:\n            fillColor = '#d4d4ff';\n            break;\n        }\n      }\n\n      if (!fillColor && (isHovered || isWire)) {\n        fillColor = isWire ? '#d66' : '#66d';\n        noBorder = true;\n      }\n\n      ctx.save();\n      ctx.fillStyle = fillColor ?? '#fff';\n      ctx.fill();\n\n      if (!noBorder) {\n        ctx.strokeStyle = '#448';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n      }\n\n      ctx.restore();\n\n      i += 1;\n    }\n  }\n\n  ctx.restore();\n}\n","import { useState } from 'react';\n\nimport { useDocumentEvent } from './useDocumentEvent';\n\nexport function usePageActive(): boolean {\n  const [isActive, setActive] = useState(true);\n\n  useDocumentEvent('visibilitychange', () => {\n    const newIsActive = document.visibilityState === 'visible';\n\n    if (isActive !== newIsActive) {\n      setActive(newIsActive);\n    }\n  });\n\n  return isActive;\n}\n","import { useEffect } from 'react';\n\nimport { useHandler } from 'hooks/useHandler';\n\nexport function useDocumentEvent(\n  eventName: string,\n  callback: (...args: unknown[]) => void,\n) {\n  const func = useHandler(callback);\n\n  useEffect(() => {\n    document.addEventListener(eventName, func, false);\n\n    return () => {\n      document.removeEventListener(eventName, func, false);\n    };\n  }, [eventName, func]);\n}\n","import { useEffect } from 'react';\n\nimport { usePageActive } from './usePageActive';\nimport { useLatest } from './useLatest';\n\nexport function useActivePageInterval(\n  callback: (() => void) | undefined,\n  ms: number,\n) {\n  const isActive = usePageActive();\n  const callbackRef = useLatest(callback);\n\n  useEffect(() => {\n    if (isActive && callbackRef.current) {\n      const intervalId = window.setInterval(() => {\n        if (callbackRef.current) {\n          callbackRef.current();\n        }\n      }, ms);\n\n      return () => {\n        window.clearInterval(intervalId);\n      };\n    }\n\n    return undefined;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isActive, ms, Boolean(callbackRef.current)]);\n}\n","import { styled } from 'stitches';\n\nimport { elementsDescriptions } from 'common/data';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nconst _Title = styled('h2', {\n  margin: 0,\n});\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function SchemaErrors({ gameModel }: Props) {\n  const { elements, connections } = useGameState(\n    gameModel,\n    ({ elements, connections }) => ({\n      elements,\n      connections,\n    }),\n  );\n\n  const errors = [];\n\n  for (const el of elements) {\n    const { pins } = elementsDescriptions[el.type];\n    const used = pins.map(() => false);\n\n    for (const connection of connections) {\n      for (const p of connection) {\n        if (p.elId === el.id) {\n          used[p.pinIndex] = true;\n        }\n      }\n    }\n\n    if (used.some((value) => !value)) {\n      errors.push(`Floating pins on node ${el.type}`);\n    }\n  }\n\n  if (!errors.length) {\n    return null;\n  }\n\n  return (\n    <div>\n      <_Title>Errors:</_Title>\n      {errors.map((line, i) => (\n        <div key={i}>{line}</div>\n      ))}\n    </div>\n  );\n}\n","import { styled } from 'stitches';\nimport { getLiteralForSignalByIndex } from 'common/common';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nconst _Wrapper = styled('div', {\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'stretch',\n  left: 52,\n  bottom: 0,\n  padding: 4,\n});\n\nconst _Title = styled('h2', {\n  marginRight: 8,\n  fontVariant: '20|30',\n});\n\nconst _Inputs = styled('div', {\n  display: 'flex',\n  gap: 4,\n\n  variants: {\n    reverse: {\n      true: {\n        flexDirection: 'row-reverse',\n      },\n    },\n  },\n});\n\nconst _InputLabel = styled('label', {\n  display: 'grid',\n  gridTemplateAreas: '\"A\"',\n  width: 30,\n  height: 30,\n  userSelect: 'none',\n  cursor: 'pointer',\n\n  '> *': {\n    gridArea: 'A',\n  },\n});\n\nconst _HiddenInput = styled('input', {\n  opacity: 0,\n});\n\nconst _Bg = styled('div', {\n  background: '#aaa',\n\n  'input:checked + &': {\n    background: '#0d0',\n  },\n});\n\nconst _Symbol = styled('p', {\n  textAlign: 'center',\n  fontVariant: '16|30',\n});\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function InputSignalsControl({ gameModel }: Props) {\n  const { inputSignals, options } = useGameState(\n    gameModel,\n    ({ inputSignals, options }) => ({\n      inputSignals,\n      options,\n    }),\n  );\n\n  if (!inputSignals.length) {\n    return null;\n  }\n\n  return (\n    <_Wrapper>\n      <_Title>Input signals:</_Title>\n      <_Inputs reverse={options.isInputVector}>\n        {inputSignals.map((enabled, index) => (\n          <_InputLabel key={index}>\n            <_HiddenInput\n              type=\"checkbox\"\n              checked={enabled}\n              onChange={(e) => {\n                const signals = inputSignals.map((enabled, i) =>\n                  i === index ? e.target.checked : enabled,\n                );\n\n                gameModel.updateInputSignals(signals);\n              }}\n            />\n            <_Bg />\n            <_Symbol>\n              {getLiteralForSignalByIndex({\n                elementsCount: inputSignals.length,\n                index,\n                isInput: true,\n                isVector: options.isInputVector,\n              })}\n            </_Symbol>\n          </_InputLabel>\n        ))}\n      </_Inputs>\n    </_Wrapper>\n  );\n}\n","import { styled } from 'stitches';\n\nimport { ElementType } from 'common/types';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nexport const _Wrapper = styled('div', {\n  position: 'absolute',\n  display: 'flex',\n  flexDirection: 'column',\n  gap: 4,\n  top: 0,\n  left: 0,\n  padding: 4,\n  borderRadius: 2,\n});\n\nexport const _Button = styled('button', {\n  width: 48,\n  height: 48,\n  flexShrink: 0,\n  border: 'none',\n  color: '#333',\n  background: '#dadada',\n  fontVariant: '14|20',\n  whiteSpace: 'nowrap',\n  appearance: 'none',\n\n  '&:disabled': {\n    color: '#999',\n  },\n\n  '&:not(:disabled)': {\n    cursor: 'pointer',\n  },\n});\n\nexport const _Divider = styled('span', {\n  height: 8,\n});\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function Toolbar({ gameModel }: Props) {\n  const { focusElement, autoSaves } = useGameState(\n    gameModel,\n    ({ focusElement, options }) => ({\n      focusElement,\n      autoSaves: options.autoSaves,\n    }),\n  );\n\n  return (\n    <_Wrapper>\n      {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n      <a href=\"#\" title=\"\">\n        <_Button type=\"button\">Menu</_Button>\n      </a>\n      <_Divider />\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.POWER);\n        }}\n      >\n        DD\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.GROUND);\n        }}\n      >\n        GND\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.NPN);\n        }}\n      >\n        npn\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.PNP);\n        }}\n      >\n        pnp\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.INPUT);\n        }}\n      >\n        input\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.OUTPUT);\n        }}\n      >\n        output\n      </_Button>\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.addElement(ElementType.DOT);\n        }}\n      >\n        dot\n      </_Button>\n      <_Divider />\n      <_Button\n        type=\"button\"\n        disabled={!focusElement}\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.deleteElementInFocus();\n        }}\n      >\n        delete\n      </_Button>\n      <_Divider />\n      {!autoSaves && (\n        <>\n          <_Button\n            type=\"button\"\n            onClick={(e) => {\n              e.preventDefault();\n              gameModel.reloadFromSave();\n            }}\n          >\n            Reload\n          </_Button>\n          <_Button\n            type=\"button\"\n            onClick={(e) => {\n              e.preventDefault();\n              gameModel.saveGame();\n            }}\n          >\n            Save\n          </_Button>\n        </>\n      )}\n      <_Button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          gameModel.clearState();\n        }}\n      >\n        Clear\n      </_Button>\n    </_Wrapper>\n  );\n}\n","import { styled } from 'stitches';\n\nconst _Option = styled('label', {\n  userSelect: 'none',\n\n  '> input:not(:disabled)': {\n    cursor: 'pointer',\n  },\n});\n\ntype Props = {\n  title: string;\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n};\n\nexport function Option({ title, checked, onChange }: Props) {\n  return (\n    <_Option>\n      <input\n        type=\"checkbox\"\n        checked={checked}\n        onChange={(e) => {\n          onChange(e.target.checked);\n        }}\n      />{' '}\n      {title}\n    </_Option>\n  );\n}\n","import { styled } from 'stitches';\nimport { Options } from 'common/types';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nimport { Option } from './Option';\n\nconst _Wrapper = styled('div', {\n  display: 'flex',\n  flexDirection: 'column',\n\n  '> *': {\n    flexShrink: 0,\n  },\n});\n\nexport const _SimulateButton = styled('button', {\n  marginBottom: 5,\n  border: '1px solid #999',\n  borderRadius: 0,\n  appearance: 'none',\n  cursor: 'pointer',\n\n  variants: {\n    active: {\n      true: {\n        color: '#fff',\n        background: 'lightgreen',\n      },\n    },\n  },\n});\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function OptionsPanel({ gameModel }: Props) {\n  const options = useGameState(gameModel, (state) => state.options);\n\n  function update(updates: Partial<Options>): void {\n    gameModel.updateOptions({\n      ...options,\n      ...updates,\n    });\n  }\n\n  function OptionControl({\n    title,\n    optionName,\n  }: {\n    title: string;\n    optionName: keyof Options;\n  }) {\n    return (\n      <Option\n        title={title}\n        checked={options[optionName]}\n        onChange={(checked) => {\n          update({ [optionName]: checked });\n        }}\n      />\n    );\n  }\n\n  return (\n    <_Wrapper>\n      <_SimulateButton\n        type=\"button\"\n        active={options.simulate}\n        onClick={(e) => {\n          e.preventDefault();\n          update({ simulate: !options.simulate });\n        }}\n      >\n        {options.simulate ? 'Simulation: ON' : 'Simulation: OFF'}\n      </_SimulateButton>\n      <OptionControl title=\"Auto saves\" optionName=\"autoSaves\" />\n      <OptionControl title=\"Debug: draw fps\" optionName=\"debugShowFps\" />\n      <OptionControl title=\"Debug: draw id\" optionName=\"debugDrawId\" />\n      <OptionControl title=\"Debug: draw axis\" optionName=\"debugDrawAxis\" />\n      <OptionControl title=\"Treat input as vector\" optionName=\"isInputVector\" />\n      <OptionControl\n        title=\"Treat output as vector\"\n        optionName=\"isOutputVector\"\n      />\n    </_Wrapper>\n  );\n}\n","import { styled } from 'stitches';\nimport { ObjectType } from 'common/types';\nimport { GameModel, useGameState } from 'models/GameModel';\n\nexport const _Yes = styled('span', {\n  color: '#4ebd4e',\n});\n\nexport const _No = styled('span', {\n  color: '#666',\n});\n\nfunction yesNo(value: unknown) {\n  if (value) {\n    return <_Yes>yes</_Yes>;\n  }\n  return <_No>no</_No>;\n}\n\ntype Props = {\n  gameModel: GameModel;\n};\n\nexport function DebugPanel({ gameModel }: Props) {\n  const {\n    elements,\n    connections,\n    movingElement,\n    focusElement,\n    hoverElement,\n    wireElement,\n    panState,\n  } = useGameState(gameModel, (state) => state);\n\n  return (\n    <div>\n      <div>elements: {elements.length}</div>\n      <div>connections: {connections.length}</div>\n      <div>el moving: {yesNo(movingElement)}</div>\n      <div>\n        el in focus:{' '}\n        {yesNo(focusElement && focusElement.type === ObjectType.ELEMENT)}\n      </div>\n      <div>\n        conn in focus:{' '}\n        {yesNo(focusElement && focusElement.type === ObjectType.CONNECTION)}\n      </div>\n      <div>\n        el hover:{' '}\n        {yesNo(hoverElement && hoverElement.type === ObjectType.ELEMENT)}\n      </div>\n      <div>\n        pin hover: {yesNo(hoverElement && hoverElement.type === ObjectType.PIN)}\n      </div>\n      <div>\n        conn hover:{' '}\n        {yesNo(hoverElement && hoverElement.type === ObjectType.CONNECTION)}\n      </div>\n      <div>wiring: {yesNo(wireElement)}</div>\n      <div>drag: {yesNo(panState.isPan)}</div>\n    </div>\n  );\n}\n","import { styled } from 'stitches';\n\nexport const _App = styled('main', {\n  position: 'relative',\n  display: 'flex',\n  alignItems: 'stretch',\n  flexGrow: 1,\n  width: '100%',\n  height: '100%',\n  overflow: 'hidden',\n});\n\nexport const _CanvasWrapper = styled('div', {\n  position: 'relative',\n  flexGrow: 1,\n  overflow: 'hidden',\n});\n\nexport const _Canvas = styled('canvas', {\n  display: 'block',\n  cursor: 'initial',\n\n  variants: {\n    enableScaling: {\n      true: {\n        transformOrigin: '0 0',\n        transform: 'scale(var(--factor, 1))',\n      },\n    },\n  },\n});\n\nexport const _FpsCounter = styled('span', {\n  position: 'absolute',\n  top: 6,\n  right: 6,\n  userSelect: 'none',\n  pointerEvents: 'none',\n});\n\nexport const _Space = styled('span', {\n  flexGrow: 1,\n});\n\nexport const _Info = styled('div', {\n  display: 'none',\n\n  '@bp2': {\n    display: 'flex',\n    flexShrink: 0,\n    flexDirection: 'column',\n    flexBasis: 300,\n    padding: '16px 20px',\n    borderLeft: '1px solid #888',\n    background: '#ddd',\n    overflow: 'hidden',\n    overflowY: 'auto',\n\n    '> *:not(:last-child)': {\n      marginBottom: 16,\n    },\n  },\n});\n","import {\n  CSSProperties,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { debounce } from 'lodash-es';\n\nimport { Coords, GameId } from 'common/types';\nimport {\n  ANIMATION_TICK,\n  MAX_FPS,\n  PREVIEW_HEIGHT,\n  PREVIEW_WIDTH,\n  PREVIEW_ZOOM,\n} from 'common/data';\nimport { GameModel, useGameState } from 'models/GameModel';\nimport { useRefState } from 'hooks/useRefState';\nimport { useForceUpdate } from 'hooks/useForceUpdate';\nimport { useHandler } from 'hooks/useHandler';\nimport { useWindowEvent } from 'hooks/useWindowEvent';\nimport { useAssets } from 'hooks/useAssets';\nimport { getCanvasContext } from 'utils/canvas';\nimport { render } from 'utils/render';\nimport { useActivePageInterval } from 'hooks/useActivePageInterval';\nimport { SchemaErrors } from 'components/SchemaErrors';\nimport { InputSignalsControl } from 'components/InputSignalsControl';\nimport { Toolbar } from 'components/Toolbar';\nimport { OptionsPanel } from 'components/OptionsPanel';\nimport { DebugPanel } from 'components/DebugPanel';\n\nimport {\n  _App,\n  _Canvas,\n  _CanvasWrapper,\n  _FpsCounter,\n  _Info,\n  _Space,\n} from './elements';\n\ntype Props = {\n  gameId: GameId;\n};\n\nfunction getCurrentDensityFactor() {\n  return window.devicePixelRatio ?? 1;\n}\n\nexport function Simulator({ gameId }: Props) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const canvasWrapperRef = useRef<HTMLDivElement>(null);\n  const forceUpdate = useForceUpdate();\n  const [drawFps, setDrawFps] = useState(0);\n  const densityFactor = useRefState({\n    value: getCurrentDensityFactor(),\n  });\n  const tickRef = useRef(0);\n\n  const gameModel = useMemo(() => {\n    if (GameModel.checkSavedGame(gameId)) {\n      return GameModel.loadGame(gameId);\n    }\n    return GameModel.createEmptyModel(gameId);\n  }, [gameId]);\n\n  gameModel.setPreviewHandler(() => {\n    const canvas = canvasRef.current;\n\n    if (!canvas) {\n      // eslint-disable-next-line no-console\n      console.warn('No canvas for getting preview');\n      return undefined;\n    }\n\n    const canvasWidth = canvas.width;\n    const canvasHeight = canvas.height;\n    const factor = densityFactor.value;\n\n    if (canvasWidth === 0 || canvasHeight === 0) {\n      return undefined;\n    }\n\n    const previewWidth = PREVIEW_WIDTH * factor;\n    const previewHeight = PREVIEW_HEIGHT * factor;\n\n    const previewCanvas = document.createElement('canvas');\n    previewCanvas.width = previewWidth;\n    previewCanvas.height = previewHeight;\n    const previewCtx = getCanvasContext(previewCanvas);\n    previewCtx.fillStyle = '#fff';\n    previewCtx.fillRect(0, 0, previewWidth, previewHeight);\n\n    const cropAspect = PREVIEW_WIDTH / PREVIEW_HEIGHT;\n    let cropWidth = PREVIEW_WIDTH * PREVIEW_ZOOM * factor;\n    let cropHeight = PREVIEW_HEIGHT * PREVIEW_ZOOM * factor;\n\n    if (cropWidth > canvasWidth) {\n      cropWidth = canvasWidth;\n      cropHeight = cropWidth / cropAspect;\n    }\n    if (cropHeight > canvasHeight) {\n      cropHeight = canvasHeight;\n      cropWidth = cropHeight * cropAspect;\n    }\n\n    // const minSize = Math.min(canvasWidth, canvasHeight);\n    // const cropSize = Math.min(minSize, 200 * factor);\n\n    // const cropCanvas = document.createElement('canvas');\n    // cropCanvas.width = cropSize;\n    // cropCanvas.height = cropSize;\n    // const cropCtx = getCanvasContext(cropCanvas);\n    // cropCtx.fillStyle = '#fff';\n    // cropCtx.fillRect(0, 0, cropSize, cropSize);\n    // cropCtx.\n\n    const sx = canvasWidth / 2 - cropWidth / 2;\n    const sy = canvasHeight / 2 - cropHeight / 2;\n\n    // const imageData = ctx.getImageData(\n    //   sx,\n    //   sy,\n    //   cropSize,\n    //   cropSize,\n    // );\n\n    previewCtx.drawImage(\n      canvas,\n      sx,\n      sy,\n      cropWidth,\n      cropHeight,\n      0,\n      0,\n      previewWidth,\n      previewHeight,\n    );\n\n    return previewCanvas.toDataURL();\n  });\n\n  const { cursor, showFps, simulate } = useGameState(\n    gameModel,\n    ({ cursor, options }) => ({\n      cursor,\n      showFps: options.debugShowFps,\n      simulate: options.simulate,\n    }),\n  );\n\n  const fps = useRefState({ value: 0 });\n\n  useActivePageInterval(\n    showFps\n      ? () => {\n          setDrawFps(fps.value);\n          fps.value = 0;\n        }\n      : undefined,\n    1000,\n  );\n\n  const size = useRefState({ width: 0, height: 0 });\n  const assets = useAssets({\n    densityFactor: densityFactor.value,\n    draw: () => draw(),\n  });\n\n  function convertScreenCoordsToAppCoords({ x, y }: Coords): Coords {\n    return {\n      x: Math.floor(x - size.width / 2),\n      y: Math.floor(y - size.height / 2),\n    };\n  }\n\n  function actualizeDensityFactor(): boolean {\n    const factor = getCurrentDensityFactor();\n\n    if (factor !== densityFactor.value) {\n      densityFactor.value = factor;\n      forceUpdate();\n      return true;\n    }\n\n    return false;\n  }\n\n  const drawHandler = useHandler(() => {\n    if (size.width === 0) {\n      return;\n    }\n\n    if (actualizeDensityFactor()) {\n      return;\n    }\n\n    const ctx = getCanvasContext(canvasRef.current);\n\n    if (showFps) {\n      fps.value += 1;\n    }\n\n    render(ctx, {\n      gameState: gameModel.getState(),\n      size,\n      densityFactor: densityFactor.value,\n      assets,\n      tick: tickRef.current,\n    });\n  });\n\n  const draw = useMemo(() => {\n    const interval = 1000 / MAX_FPS;\n\n    return debounce(drawHandler, interval, {\n      maxWait: interval,\n      leading: true,\n      trailing: true,\n    });\n  }, [drawHandler]);\n\n  useActivePageInterval(\n    simulate\n      ? () => {\n          tickRef.current += 1;\n          draw();\n        }\n      : undefined,\n    ANIMATION_TICK,\n  );\n\n  function updateSize() {\n    const canvasWrapper = canvasWrapperRef.current;\n    const canvas = canvasRef.current;\n\n    if (!canvasWrapper || !canvas) {\n      throw new Error();\n    }\n\n    size.width = canvasWrapper.clientWidth;\n    size.height = canvasWrapper.clientHeight;\n\n    canvas.width = size.width * densityFactor.value;\n    canvas.height = size.height * densityFactor.value;\n\n    drawHandler();\n  }\n\n  useEffect(() => {\n    gameModel.setDrawHandler(draw);\n\n    return () => {\n      gameModel.destroy();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(updateSize, [densityFactor.value]);\n\n  useWindowEvent('resize', () => {\n    setTimeout(() => {\n      actualizeDensityFactor();\n      updateSize();\n    }, 0);\n  });\n\n  return (\n    <_App>\n      <_CanvasWrapper ref={canvasWrapperRef}>\n        <_Canvas\n          ref={canvasRef}\n          enableScaling={densityFactor.value !== 1}\n          width={0}\n          height={0}\n          style={\n            {\n              '--factor': 1 / densityFactor.value,\n              cursor,\n            } as CSSProperties\n          }\n          onClick={(e) => {\n            if (e.button === 0) {\n              e.preventDefault();\n            }\n          }}\n          onMouseDown={(e) => {\n            if (e.button === 0) {\n              e.preventDefault();\n              gameModel.onMouseDown();\n            }\n          }}\n          onMouseMove={(e) => {\n            gameModel.onMouseMove({\n              position: convertScreenCoordsToAppCoords({\n                x: e.clientX,\n                y: e.clientY,\n              }),\n              movement: { x: e.movementX, y: e.movementY },\n            });\n          }}\n          onMouseUp={(e) => {\n            if (e.button === 0) {\n              e.preventDefault();\n              gameModel.onMouseUp();\n            }\n          }}\n          onMouseLeave={() => {\n            gameModel.resetCursorState();\n          }}\n          onContextMenu={(e) => {\n            if (!gameModel.allowOpenContextMenu()) {\n              e.preventDefault();\n            }\n          }}\n        />\n        {showFps && <_FpsCounter>{drawFps}</_FpsCounter>}\n      </_CanvasWrapper>\n      <Toolbar gameModel={gameModel} />\n      <InputSignalsControl gameModel={gameModel} />\n      <_Info>\n        <OptionsPanel gameModel={gameModel} />\n        {/* <TruthTable gameModel={gameModel} /> */}\n        <SchemaErrors gameModel={gameModel} />\n        <_Space />\n        <DebugPanel gameModel={gameModel} />\n      </_Info>\n    </_App>\n  );\n}\n","import { useEffect } from 'react';\n\nimport { Assets, ElementType, LoadingStatus } from 'common/types';\nimport { useRefState } from 'hooks/useRefState';\n\nexport function useAssets({\n  densityFactor,\n  draw,\n}: {\n  densityFactor: number;\n  draw: () => void;\n}): Assets {\n  const assets = useRefState<Assets>({\n    x1: { images: {}, status: LoadingStatus.NONE },\n    x2: { images: {}, status: LoadingStatus.NONE },\n  });\n\n  useEffect(() => {\n    const is2x = densityFactor > 1.5;\n\n    const assetsSet = assets[is2x ? 'x1' : 'x2'];\n\n    if (assetsSet.status !== LoadingStatus.NONE) {\n      return;\n    }\n\n    const loadImages = [\n      ElementType.PNP,\n      ElementType.NPN,\n      ElementType.POWER,\n      ElementType.GROUND,\n    ];\n\n    let remainLoad = loadImages.length;\n\n    function onLoad() {\n      remainLoad -= 1;\n\n      if (remainLoad === 0) {\n        assetsSet.status = LoadingStatus.DONE;\n        draw();\n      }\n    }\n\n    assetsSet.status = LoadingStatus.LOADING;\n\n    for (const imgName of loadImages) {\n      const image = new Image();\n      image.src = `assets/${imgName}${is2x ? '@2x' : ''}.png`;\n      image.addEventListener('load', () => {\n        assetsSet.images[imgName] = image;\n        onLoad();\n      });\n      image.addEventListener('error', onLoad);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [densityFactor]);\n\n  return assets;\n}\n","import { useLayoutEffect, useMemo, useState } from 'react';\n\nimport { GameId, GameSaveDescriptor } from 'common/types';\nimport { getNextGameId, parseGameId } from 'utils/game';\nimport { useOnChange } from 'hooks/useOnChange';\nimport { useWindowEvent } from 'hooks/useWindowEvent';\nimport { MainMenu } from 'components/MainMenu';\nimport { Simulator } from 'components/Simulator';\n\nfunction getCurrentGameId(\n  currentGames: GameSaveDescriptor[],\n): GameId | undefined {\n  const hash = (window.location.hash ?? '').trim().replace(/^#/, '');\n\n  if (hash) {\n    const game = parseGameId(hash);\n\n    if (game && currentGames.some(({ id }) => id === game.gameId)) {\n      return game.gameId;\n    }\n  }\n\n  return undefined;\n}\n\nexport function App() {\n  const savedGames = useMemo<GameSaveDescriptor[]>(() => {\n    const json = localStorage.getItem('sch_games');\n    if (!json) {\n      return [];\n    }\n\n    return JSON.parse(json).map((data: GameSaveDescriptor | string) => {\n      if (typeof data === 'string') {\n        return {\n          id: data as GameId,\n          title: data,\n        };\n      }\n\n      return data;\n    });\n  }, []);\n  const [currentGames, setCurrentGames] = useState(savedGames);\n\n  useOnChange(() => {\n    localStorage.setItem('sch_games', JSON.stringify(currentGames));\n  }, [currentGames]);\n\n  const [currentGameId, setCurrentGameId] = useState(\n    getCurrentGameId(currentGames),\n  );\n\n  useWindowEvent('hashchange', () => {\n    const gameId = getCurrentGameId(currentGames);\n\n    if (gameId !== currentGameId) {\n      setCurrentGameId(gameId);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!currentGames.length && !currentGameId) {\n      const newGameId = getNextGameId(currentGames);\n\n      setCurrentGames([\n        {\n          id: newGameId,\n          title: 'Untitled schema',\n        },\n      ]);\n\n      window.setTimeout(() => {\n        window.location.assign(`#${newGameId}`);\n      }, 0);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (currentGameId) {\n    return <Simulator key={currentGameId} gameId={currentGameId} />;\n  }\n\n  return (\n    <MainMenu currentGames={currentGames} setCurrentGames={setCurrentGames} />\n  );\n}\n","import { useEffect, DependencyList, useRef } from 'react';\n\nexport function useOnChange(callback: () => void, deps: DependencyList) {\n  const initRef = useRef(false);\n\n  useEffect(() => {\n    if (!initRef.current) {\n      initRef.current = true;\n      return;\n    }\n\n    callback();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'normalize.css/normalize.css';\nimport './index.css';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}