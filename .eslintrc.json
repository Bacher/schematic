{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "airbnb",
    "airbnb-typescript",
    "react-app",
    "prettier",
    "plugin:react-hooks/recommended",
    "plugin:eslint-comments/recommended"
  ],
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "settings": {
    "import/resolver": {
      "typescript": {}
    }
  },
  "rules": {
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-shadow": "off",
    "@typescript-eslint/lines-between-class-members": [
      "error",
      "always",
      {
        "exceptAfterSingleLine": true
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      {
        "selector": "variableLike",
        "format": ["camelCase", "StrictPascalCase"]
      },
      {
        "selector": "variable",
        "modifiers": ["const"],
        "format": ["camelCase", "StrictPascalCase", "UPPER_CASE"],
        "leadingUnderscore": "allowSingleOrDouble"
      },
      {
        "selector": "parameter",
        "format": ["camelCase"],
        "leadingUnderscore": "allowSingleOrDouble"
      },
      {
        "selector": "typeLike",
        "format": ["StrictPascalCase"]
      },
      {
        "selector": "function",
        "format": ["camelCase", "StrictPascalCase"]
      },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"]
      }
    ],
    "no-param-reassign": [
      "off",
      {
        "props": false
      }
    ],
    "no-debugger": "warn",
    "eslint-comments/no-unused-disable": "error",
    "import/no-unresolved": "error",
    "import/prefer-default-export": "off",
    "jsx-a11y/label-has-associated-control": "off",
    "no-lonely-if": "off",
    "no-underscore-dangle": "off",
    "react/no-array-index-key": "off",
    "react/react-in-jsx-scope": "off",
    "react/jsx-pascal-case": [
      "error",
      {
        "allowLeadingUnderscore": true
      }
    ],
    "no-restricted-syntax": [
      "error",
      "ForInStatement",
      "LabeledStatement",
      "WithStatement",
      "BinaryExpression[operator='in']"
    ]
  }
}
